&НаКлиенте
Процедура ПутьКСпискуБазОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(ПутьКСпискуБаз) Тогда
		Возврат;
	КонецЕсли;

	Файл = Новый Файл(ПутьКСпискуБаз);
	Если Файл.Существует() Тогда
		СисИнфо = Новый СистемнаяИнформация;
		Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Или СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			Shell = Новый COMОбъект("WScript.Shell");
			WindowsDir = Shell.ExpandEnvironmentStrings("%WINDIR%");
			ЗапуститьПриложение(WindowsDir + "\explorer.exe /select,""" + Файл.ПолноеИмя + """");
		Иначе
			ЗапуститьПриложение(Файл.Путь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКСпискуБазНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Если Диалог.Выбрать() Тогда
		ПутьКСпискуБаз = Диалог.ПолноеИмяФайла;
		ПолучитьСписокБаз();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокБаз()

	Если ПустаяСтрока(ПутьКСпискуБаз) Тогда
		Возврат;
	КонецЕсли;

	КоличествоБаз = 0;
	КоличествоСерверных = 0;
	КоличествоФайловых = 0;

	ФайлСБазами = Новый Файл(ПутьКСпискуБаз);
	//Начинает читать файл с ИБ
	Если Не ФайлСБазами.Существует() Тогда
		Сообщить("Файл не найден, проверьте его существование!");
		Возврат;
	КонецЕсли;
	СписокБазБезГрупп.Очистить();

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКСпискуБаз);
	ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
	СтрокиФайла = СтрРазделить(ТекстФайла, Символы.ПС, Ложь);
	Для Каждого ТекСтрока Из СтрокиФайла Цикл
		// [<Название ИБ>] - Название ИБ, которое будет отображаться в списке
		Если СтрНачинаетсяС(ТекСтрока, "[") Тогда
			НазваниеИБ = Сред(ТекСтрока, 2, СтрДлина(ТекСтрока) - 2);
			НоваяСтрока = СписокБазБезГрупп.Добавить();
			НоваяСтрока.НазваниеБазы = НазваниеИБ;
			НоваяСтрока.ЭтоПапка = Истина;
			// Connect= 	
		ИначеЕсли СтрНачинаетсяС(ТекСтрока, "Connect=") Тогда
			Значение = Прав(ТекСтрока, СтрДлина(ТекСтрока) - СтрНайти(ТекСтрока, "="));
			КоличествоБаз = КоличествоБаз + 1;
			Если СтрНачинаетсяС(Значение, "Srvr") Тогда
				КоличествоСерверных = КоличествоСерверных + 1;
			Иначе
				КоличествоФайловых = КоличествоФайловых + 1;
			КонецЕсли;
			СписокБазБезГрупп[СписокБазБезГрупп.Количество() - 1].Connect = Значение;
			СписокБазБезГрупп[СписокБазБезГрупп.Количество() - 1].ЭтоПапка = ПустаяСтрока(Значение);
			// ID=	
		ИначеЕсли СтрНачинаетсяС(ТекСтрока, "ID=") Тогда
			СписокБазБезГрупп[СписокБазБезГрупп.Количество() - 1].ID = Прав(ТекСтрока, СтрДлина(ТекСтрока) - СтрНайти(
				ТекСтрока, "="));
			// OrderInList=	
		ИначеЕсли СтрНачинаетсяС(ТекСтрока, "OrderInList=") Тогда
			СписокБазБезГрупп[СписокБазБезГрупп.Количество() - 1].OrderInList = Прав(ТекСтрока, СтрДлина(ТекСтрока)
				- СтрНайти(ТекСтрока, "="));
			// Folder=	
		ИначеЕсли СтрНачинаетсяС(ТекСтрока, "Folder=") Тогда
			СписокБазБезГрупп[СписокБазБезГрупп.Количество() - 1].Folder = Прав(ТекСтрока, СтрДлина(ТекСтрока)
				- СтрНайти(ТекСтрока, "=/") - 1);
			// OrderInTree=	
		ИначеЕсли СтрНачинаетсяС(ТекСтрока, "OrderInTree=") Тогда
			СписокБазБезГрупп[СписокБазБезГрупп.Количество() - 1].OrderInTree = Прав(ТекСтрока, СтрДлина(ТекСтрока)
				- СтрНайти(ТекСтрока, "="));
		КонецЕсли;
	КонецЦикла;
	СписокБазБезГрупп.Сортировать("Folder, НазваниеБазы");
	ЗаполнитьДеревоБаз();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоБаз()

	Дерево = РеквизитФормыВЗначение("СписокБаз");
	Дерево.Строки.Очистить();
	Для Каждого Строка Из СписокБазБезГрупп Цикл
		Если ПустаяСтрока(Строка.Folder) Тогда
			НоваяСтрока = Дерево.Строки.Добавить();
		Иначе
			МассивПапок = СтрРазделить(Строка.Folder, "/", Ложь);
			КонечнаяПапка = Дерево;
			Для Каждого ИмяПапки Из МассивПапок Цикл
				КонечнаяПапка = ПоискКонечнойПапки(КонечнаяПапка, ИмяПапки);
			КонецЦикла;
			НоваяСтрока = КонечнаяПапка.Строки.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево, "СписокБаз");

КонецПроцедуры // ЗаполнитьДеревоБаз()

&НаСервере
Функция ПоискКонечнойПапки(Дерево, ИмяПапки)

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЭтоПапка", Истина);
	СтруктураПоиска.Вставить("НазваниеБазы", ИмяПапки);

	НайденныеСтроки = Дерево.Строки.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	КонецЕсли;

КонецФункции // ПоискКонечнойПапки()

&НаКлиенте
Процедура ПрочитатьСписокБазИзФайла(Команда)
	ПолучитьСписокБаз();
КонецПроцедуры

&НаСервере
Процедура ПолучитьВерсииКонфигурацийНаСервере()

	Дерево = РеквизитФормыВЗначение("СписокБаз");
	ПройтисьПоДереву(Дерево, "УстановкаВерсииКонфигурации");
	ЗначениеВРеквизитФормы(Дерево, "СписокБаз");

КонецПроцедуры

&НаСервере
Процедура ПройтисьПоДереву(Дерево, НазваниеПроцедуры)

	Для Каждого Строка Из Дерево.Строки Цикл
		Если Строка.ЭтоПапка Тогда
			ПройтисьПоДереву(Строка, НазваниеПроцедуры);
		Иначе
			Выполнить (НазваниеПроцедуры + "(Строка)");
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПройтисьПоДереву()

&НаСервере
Функция УстановкаВерсииКонфигурации(Строка)

	Если ЗначениеЗаполнено(Строка.ВерсияКонфигурации) Тогда
		Возврат Ложь;
	КонецЕсли;

	СтрокаПодключения = Строка.Connect + " usr=""" + Логин + """; pwd=""" + Пароль + """;";
	ComConnector = Новый COMОбъект("V83.COMConnector");
	Попытка
		ComConnection = COMConnector.Connect(СтрокаПодключения);
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Ошибка подключения: " + ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	Строка.ВерсияКонфигурации = ComConnection.Метаданные.КраткаяИнформация + " (" + ComConnection.Метаданные.Версия
		+ ")";
	ComConnector = Неопределено;

КонецФункции

&НаКлиенте
Процедура ПолучитьВерсииКонфигураций(Команда)
	ОчиститьСообщения();
	ПолучитьВерсииКонфигурацийНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьПароль(Команда)
	Элементы.Пароль.РежимПароля = Не Элементы.Пароль.РежимПароля;
КонецПроцедуры

&НаСервере
Процедура ПолучитьВерсииКонфигурацийВыделенныеНаСервере()
	Дерево = РеквизитФормыВЗначение("СписокБаз");
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокБаз.ВыделенныеСтроки Цикл
		СтрокаФормы = СписокБаз.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтруктураПоиска = Новый Структура("НазваниеБазы, ЭтоПапка, Connect, ID");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаФормы);

		НайденныеСтроки = Дерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Продолжить;
		КонецЕсли;

		Если Строка.ЭтоПапка Тогда
			ПройтисьПоДереву(Строка, "УстановкаВерсииКонфигурации");
		Иначе
			УстановкаВерсииКонфигурации(Строка);
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево, "СписокБаз");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВерсииКонфигурацийВыделенные(Команда)
	ОчиститьСообщения();
	ПолучитьВерсииКонфигурацийВыделенныеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВключитьОтображениеНовостейНаСервере()
	Дерево = РеквизитФормыВЗначение("СписокБаз");
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокБаз.ВыделенныеСтроки Цикл
		СтрокаФормы = СписокБаз.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтруктураПоиска = Новый Структура("НазваниеБазы, ЭтоПапка, Connect, ID");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаФормы);

		НайденныеСтроки = Дерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Продолжить;
		КонецЕсли;

		Если Строка.ЭтоПапка Тогда
			ПройтисьПоДереву(Строка, "УправленеиНовостямиВключить");
		Иначе
			УправленеиНовостямиВключить(Строка);
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево, "СписокБаз");
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтображениеНовостей(Команда)
	ОчиститьСообщения();
	ВключитьОтображениеНовостейНаСервере();
КонецПроцедуры

&НаСервере
Функция УправленеиНовостямиВключить(Строка)

	СтрокаПодключения = Строка.Connect + " usr=""" + Логин + """; pwd=""" + Пароль + """;";
	ComConnector = Новый COMОбъект("V83.COMConnector");
	СообщениеПользователю = Новый СообщениеПользователю;
	Попытка
		ComConnection = COMConnector.Connect(СтрокаПодключения);
	Исключение
		СообщениеПользователю.Текст = "Ошибка подключения: " + ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	Изменено = Ложь;
	Если ComConnection.Метаданные.Константы.Find("РазрешенаРаботаСНовостями") <> Неопределено Тогда
		ComConnection.Константы.РазрешенаРаботаСНовостями.Установить(Истина);
		Изменено = Истина;
	КонецЕсли;
	Если ComConnection.Метаданные.Константы.Find("РазрешенаРаботаСНовостямиЧерезИнтернет") <> Неопределено Тогда
		ComConnection.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(Истина);
		Изменено = Истина;
	КонецЕсли;
	Если Изменено Тогда
		СообщениеПользователю.Текст = "В базе " + Строка.НазваниеБазы + " были отключены новости";
		СообщениеПользователю.Сообщить();
	Иначе
		СообщениеПользователю.Текст = "В базе " + Строка.НазваниеБазы + " не найдены константы";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	ComConnector = Неопределено;

КонецФункции

&НаСервере
Функция УправленеиНовостямиВыключить(Строка)

	СтрокаПодключения = Строка.Connect + " usr=""" + Логин + """; pwd=""" + Пароль + """;";
	ComConnector = Новый COMОбъект("V83.COMConnector");
	СообщениеПользователю = Новый СообщениеПользователю;
	Попытка
		ComConnection = COMConnector.Connect(СтрокаПодключения);
	Исключение
		СообщениеПользователю.Текст = "Ошибка подключения: " + ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	Изменено = Ложь;
	Если ComConnection.Метаданные.Константы.Find("РазрешенаРаботаСНовостями") <> Неопределено Тогда
		ComConnection.Константы.РазрешенаРаботаСНовостями.Установить(Ложь);
		Изменено = Истина;
	КонецЕсли;
	Если ComConnection.Метаданные.Константы.Find("РазрешенаРаботаСНовостямиЧерезИнтернет") <> Неопределено Тогда
		ComConnection.Константы.РазрешенаРаботаСНовостямиЧерезИнтернет.Установить(Ложь);
		Изменено = Истина;
	КонецЕсли;
	Если Изменено Тогда
		СообщениеПользователю.Текст = "В базе " + Строка.НазваниеБазы + " были отключены новости";
		СообщениеПользователю.Сообщить();
	Иначе
		СообщениеПользователю.Текст = "В базе " + Строка.НазваниеБазы + " не найдены константы";
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	ComConnector = Неопределено;

КонецФункции

&НаСервере
Процедура УбратьОтображениеНовостейНаСервере()
	Дерево = РеквизитФормыВЗначение("СписокБаз");
	Для Каждого ВыделеннаяСтрока Из Элементы.СписокБаз.ВыделенныеСтроки Цикл
		СтрокаФормы = СписокБаз.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтруктураПоиска = Новый Структура("НазваниеБазы, ЭтоПапка, Connect, ID");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаФормы);

		НайденныеСтроки = Дерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
		Иначе
			Продолжить;
		КонецЕсли;

		Если Строка.ЭтоПапка Тогда
			ПройтисьПоДереву(Строка, "УправленеиНовостямиВыключить");
		Иначе
			УправленеиНовостямиВыключить(Строка);
		КонецЕсли;
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево, "СписокБаз");
КонецПроцедуры

&НаКлиенте
Процедура УбратьОтображениеНовостей(Команда)
	ОчиститьСообщения();
	УбратьОтображениеНовостейНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Попытка
		//@skip-warning
		ComConnector = Новый COMОбъект("V83.COMConnector");
		ComConnector = Неопределено;
	Исключение
		Сообщить("Не зарегистрирован компонента ""V83.COMConnector""");
	КонецПопытки;
	ПолучитьСписокБаз();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныйПуть(Команда)

	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Или СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Shell = Новый COMОбъект("WScript.Shell");
		Каталог = Shell.ExpandEnvironmentStrings("%APPDATA%");
		ИмяФайла = Каталог + "\1C\1CEStart\ibases.v8i";
		ФайлСБазами = Новый Файл(ИмяФайла);
		//Начинает читать файл с ИБ
		Если Не ФайлСБазами.Существует() Тогда
			Сообщить("Файл не найден, проверьте его существование!");
			Возврат;
		КонецЕсли;
		ПутьКСпискуБаз = ИмяФайла;
		ПолучитьСписокБаз();
	КонецЕсли;

КонецПроцедуры

// Функция - Получить структуру соединения информационной базы
//
// Параметры:
//  СтрокаСоединения - Строка - Строка соединения с информационной базой в формате "<Имя параметра>=<Значение параметра>;". При пустом значении используется текущая строка соединения
// 
// Возвращаемое значение:
// Структура - Ключ - <Имя параметра>, значение - <Значение параметра>
//
Функция ПолучитьСтруктуруСоединенияИнформационнойБазы(Знач СтрокаСоединения = Неопределено) Экспорт
	Если СтрокаСоединения = Неопределено Тогда
		СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;

	Результат = Новый Структура;

	МассивПараметров = СтрРазделить(СтрокаСоединения, ";", Ложь);
	Для Каждого ПараметрМассива Из МассивПараметров Цикл
		Поз = СтрНайти(ПараметрМассива, "=");
		Ключ = ТРег(СокрЛП(Лев(ПараметрМассива, Поз - 1)));
		Значение = СокрЛП(Сред(ПараметрМассива, Поз + 1));
		Если Лев(Значение, 1) = """" И Прав(Значение, 1) = """" Тогда
			Значение = Сред(Значение, 2, СтрДлина(Значение) - 2);
		КонецЕсли;
		Попытка
			Результат.Вставить(Ключ, Значение);
		Исключение
		КонецПопытки;
	КонецЦикла;

	Возврат Результат;
КонецФункции

// Функция - Блокировка регламентных заданий в текущей информационной базе
//
// Параметры:
//  УстановитьБлокировку - Булево - Если задан, то производится попытка изменить состояние блокировки регламентных заданий
// 
// Возвращаемое значение:
// Булево - состояние блокировки после установки нового состояния.
// Неопределено - в случае, если невозможно изменить состояние блокировки регламетных заданий
//
Функция БлокировкаРегламентныхЗаданий(УстановитьБлокировку = Неопределено) Экспорт
	АдминистраторИБ = Новый Структура("Имя, Пароль", "username", "password");

	СтруктураСоединения = ПолучитьСтруктуруСоединенияИнформационнойБазы();

	COMСоединитель = Новый COMОбъект("V83.COMConnector");
	Попытка
		СоединениеСАгентомСервера = COMСоединитель.ConnectAgent(СтруктураСоединения.Srvr);
	Исключение
		СоединениеСАгентомСервера = Неопределено;
	КонецПопытки;
	Если СоединениеСАгентомСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивКластеров = СоединениеСАгентомСервера.GetClusters();
	КластерТекущий = Неопределено;
	Для Каждого Кластер Из МассивКластеров Цикл
		Если Нрег(Кластер.HostName) = Нрег(СтруктураСоединения.Srvr) Тогда
			КластерТекущий = Кластер;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если КластерТекущий = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	СоединениеСАгентомСервера.Authenticate(КластерТекущий, "", "");

	МассивРабочихПроцессов = СоединениеСАгентомСервера.GetWorkingProcesses(КластерТекущий);
	ИнформационнаяБазаТекущая = Неопределено;
	Для Каждого РабочийПроцесс Из МассивРабочихПроцессов Цикл
		СоединениеСРабочимПроцессом = COMСоединитель.ConnectWorkingProcess("tcp://" + РабочийПроцесс.HostName + ":"
			+ Формат(РабочийПроцесс.MainPort, "ЧГ=0"));
		СоединениеСРабочимПроцессом.AddAuthentication(АдминистраторИБ.Имя, АдминистраторИБ.Пароль);
		МассивИнформационныхБаз = СоединениеСРабочимПроцессом.GetInfoBases();
		Для Каждого ИнформационнаяБаза Из МассивИнформационныхБаз Цикл
			Если Нрег(ИнформационнаяБаза.Name) = Нрег(СтруктураСоединения.Ref) Тогда
				ИнформационнаяБазаТекущая = ИнформационнаяБаза;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ИнформационнаяБазаТекущая = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ИнформационнаяБазаТекущая = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = Неопределено;
	Если ТипЗнч(УстановитьБлокировку) = Тип("Булево") Тогда
		Попытка
			ИнформационнаяБазаТекущая.ScheduledJobsDenied = УстановитьБлокировку;
			СоединениеСРабочимПроцессом.UpdateInfoBase(ИнформационнаяБазаТекущая);
			Результат = ИнформационнаяБазаТекущая.ScheduledJobsDenied;
		Исключение
		КонецПопытки;
	Иначе
		Результат = ИнформационнаяБазаТекущая.ScheduledJobsDenied;
	КонецЕсли;

	Возврат Результат;
КонецФункции