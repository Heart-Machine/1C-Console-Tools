&НаКлиенте
Перем ЗакрытиеФормыПодтверждено;

//КОМАНДЫ
&НаКлиенте
Процедура КомандаВыполнитьЗапрос(Команда)

	ОчиститьСообщения();
	ТекстТекущегоЗапроса = ПолучитьТекстТекущегоЗапроса();
	Если Не ПустаяСтрока(ТекстТекущегоЗапроса) Тогда
		ВремяВыполнения = -1;
		ЧислоСтрок = 0;
		Элементы.ВыполнитьЗапрос.Картинка = БиблиотекаКартинок.СтартБизнесПроцесса;
		ЗапросВыполненУспешно = ВыполнитьЗапросНаСервере(ТекстТекущегоЗапроса, ВремяВыполнения, ЧислоСтрок);
		Элементы.ВыполнитьЗапрос.Картинка = БиблиотекаКартинок.НастройкиОтчета;

		Если ЗапросВыполненУспешно Тогда
			СтрокаТЗ = ПолучитьСтрокуТЗЗапросы();
			СтрокаТЗ.ВремяВыполнения = ВремяВыполнения;
			СтрокаТЗ.ЧислоСтрок = ЧислоСтрок;
			Элементы.ГруппаТекстЗапроса.Заголовок = "Текст запроса (время выполнения: " + ПолучитьПериодСтрокой(
				ВремяВыполнения) + ", число строк: " + ЧислоСтрок + ")";
			
			//Если установлен флаг, то выборка разворачивется на всю форму
			Если АвтоматическиВыводитьРезультатНаВсюФормуПослеВыполнения Тогда
				УстановитьПометкуЭлементаКоманда("КомандаВыборкаДанныхЗапросаНаВсюФорму", Истина);
			КонецЕсли;
		Иначе
			//При ошибке должен отображаться текст запроса
			УстановитьПометкуЭлементаКоманда("КомандаВыборкаДанныхЗапросаНаВсюФорму", Ложь);
		КонецЕсли;
		
		//Сброс режима 'На всю форму' для текста запроса
		УстановитьПометкуЭлементаКоманда("КомандаТекстЗапросаНаВсюФорму", Ложь);

		ОбновитьВидимостьДоступностьЭлементовФормы();

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКонструкторЗапроса(Команда)
	ОткрытьКонструкторЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСимволыВертикальнаяЧерта(Команда)
	ДобавитьСимволыВертикальнаяЧерта();
	СохранитьТекстТекущегоЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьСимволыВертикальнаяЧерта(Команда)
	УдалитьСимволыВертикальнаяЧерта();
	СохранитьТекстТекущегоЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФайл(Команда)

	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
	ВыборФайла.Фильтр = "Текстовые документы (*.txt)|*.txt|Все файлы (*.*)|*.*";

	Если ВыборФайла.Выбрать() Тогда

		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
		пПутьКФайлу = ВыборФайла.Каталог;
		ДлинаПутиККаталогу = СтрДлина(пПутьКФайлу);
		ДлинаПутиКФайлу = СтрДлина(ПолноеИмяФайла);
		ИмяФайла = Сред(ПолноеИмяФайла, ДлинаПутиККаталогу + 1, ДлинаПутиКФайлу - ДлинаПутиККаталогу);

		РезультатЧтения = ЗагрузитьТекстЗапросаИзФайла(ПолноеИмяФайла, ИмяФайла);
		Если Не ПустаяСтрока(РезультатЧтения) Тогда
			Сообщить("При чтении файла '" + ПолноеИмяФайла + "' возникла ошибка: " + РезультатЧтения);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьТекстЗапросаВФайл(Команда)

	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.Заголовок = НСтр("ru = 'Выбор каталога для сохранения'");
	ВыборФайла.Фильтр = "Текстовые документы (*.txt)|*.txt|Все файлы (*.*)|*.*";
	ВыборФайла.ПроверятьСуществованиеФайла = Истина;
	СтрокаТЗ = ПолучитьСтрокуТЗЗапросы();
	ВыборФайла.ПолноеИмяФайла = СтрокаТЗ.ИмяЗапроса;

	Если ВыборФайла.Выбрать() Тогда

		ТекстЗапросаДляСохранения = ПолучитьТекстТекущегоЗапросаДляСохранения();
		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;

		РезультатСохранения = СохранитьТекстЗапросаВФайл(ПолноеИмяФайла, ТекстЗапросаДляСохранения);

		Если Не ПустаяСтрока(РезультатСохранения) Тогда
			Сообщить("При сохранении файла '" + ПолноеИмяФайла + "' возникла ошибка: " + РезультатСохранения);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСимволыКомментария(Команда)
	ДобавитьСимволыКомментария();
	СохранитьТекстТекущегоЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьСимволыКомментария(Команда)
	УдалитьСимволыКомментария();
	СохранитьТекстТекущегоЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПосетитьСайтАвтора(Команда)
	ЗапуститьПриложение("http://sertakov.ru");
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучитьПараметрыИзЗапроса(Команда)
	ПолучитьПараметрыИзЗапросаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазвернутьТекстЗапросаНаВсюФорму(Команда)

	УстановитьПометкуЭлементаКоманда("КомандаТекстЗапросаНаВсюФорму", Не Элементы.КомандаТекстЗапросаНаВсюФорму.Пометка);
	Если Элементы.КомандаТекстЗапросаНаВсюФорму.Пометка Тогда
		УстановитьПометкуЭлементаКоманда("КомандаВыборкаДанныхЗапросаНаВсюФорму", Ложь);
	КонецЕсли;
	ОбновитьВидимостьДоступностьЭлементовФормы();

КонецПроцедуры

&НаКлиенте
Процедура КомандаРазвернутьВыборкуДанныхЗапросаНаВсюФорму(Команда)

	УстановитьПометкуЭлементаКоманда("КомандаВыборкаДанныхЗапросаНаВсюФорму",
		Не Элементы.КомандаВыборкаДанныхЗапросаНаВсюФорму.Пометка);
	Если Элементы.КомандаВыборкаДанныхЗапросаНаВсюФорму.Пометка Тогда
		УстановитьПометкуЭлементаКоманда("КомандаТекстЗапросаНаВсюФорму", Ложь);
	КонецЕсли;
	ОбновитьВидимостьДоступностьЭлементовФормы();

КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьВыборку(Команда)

	Оповещение = Новый ОписаниеОповещения("КомандаОчиститьВыборкуЗавершение", ЭтаФорма);
	ПоказатьВопрос(Оповещение, "Очистить выборку?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет,
		"Очистка выборки");
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьВыборкуЗавершение(Результат, ДопПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Попытка
			ЭтаФорма["ТЗ"].Очистить();
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнитьИСохранитьВФайл(Команда)

	Если Не ЗначениеЗаполнено(ВыгрузкаВФайлПутьКФайлу) Или РазделительКолонок = "" Тогда
		Сообщить("Не все требуемые настройки заполнены");
		Возврат;
	КонецЕсли;

	ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьИСохранитьВФайлЗавершение", ЭтаФорма),
		"Выполнить запрос и сохранить строки в файл?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет,
		"Выгрузка результата запроса");

КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьВыборкуВФайл(Команда)

	Если Вопрос("Сохранить строки выборки в файл?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет,
		"Сохранение выборки") = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВыгрузкаВФайлПутьКФайлу) Или РазделительКолонок = "" Тогда
		Сообщить("Не все требуемые настройки заполнены");
		Возврат;
	КонецЕсли;

	СохранитьВыборкуВФайлНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьЗапрос(Команда)

	СоздатьНовыйЗапрос();

КонецПроцедуры


//ОСНОВНЫЕ ПРОЦЕДУРЫ
&НаСервере
Функция ВыполнитьЗапросНаСервере(ТекстЗапроса, ВремяВыполнения, ЧислоСтрок)

	ЗапросВыполненУспешно = Ложь;

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	УстановитьПараметры(Запрос);

	Попытка
		ДатаДоВыполненияЗапроса = ТекущаяДата();
		РезультатВыполненияЗапроса = ?(ПакетныйЗапрос, Запрос.ВыполнитьПакет(), Запрос.Выполнить());
		ДатаПослеВыполненияЗапроса = ТекущаяДата();
		ВремяВыполнения = ДатаПослеВыполненияЗапроса - ДатаДоВыполненияЗапроса;
		ЗапросВыполненУспешно = Истина;
		ОбновитьТаблицуНаФорме(РезультатВыполненияЗапроса, ЧислоСтрок);
	Исключение
		Сообщить("При выполнении запроса произошла ошибка: " + ОписаниеОшибки());
	КонецПопытки;

	Возврат ЗапросВыполненУспешно;

КонецФункции

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса()

	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Конструктор = Новый КонструкторЗапроса(ТекстЗапроса);
	Иначе
		Конструктор = Новый КонструкторЗапроса;
	КонецЕсли;

#Если ТолстыйКлиентУправляемоеПриложение Тогда
	Если Конструктор.ОткрытьМодально() Тогда
		ТекстЗапроса = Конструктор.Текст;
		СтрокаТЗ = ПолучитьСтрокуТЗЗапросы();
		СтрокаТЗ.ТекстЗапроса = ТекстЗапроса;
		ПолучитьПараметрыИзЗапросаНаСервере();
		Элементы.ГруппаЗапросыМетаданныеПараметры.ТекущаяСтраница = Элементы.ГруппаТекстЗапроса;
	КонецЕсли;
#ИначеЕсли ТонкийКлиент Тогда
	ПараметрыКонструктора = Новый Структура("Конструктор", Конструктор);
	ОповещениеКонструктора = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияКонструктора", ЭтаФорма,
		ПараметрыКонструктора);
	Конструктор.Показать(ОповещениеКонструктора);
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьТекстЗапросаИзФайла(ПутьКФайлу, ИмяФайла)

	Результат = "";
	ТекстЗапросаИзФайла = "";
	ОчереднаяСтрока = "";
	ЧтениеТекста = Новый ЧтениеТекста;

	Попытка

		ЧтениеТекста.Открыть(ПутьКФайлу);
		// строки читаются до символа перевода строки
		Пока ОчереднаяСтрока <> Неопределено Цикл
			ОчереднаяСтрока = ЧтениеТекста.ПрочитатьСтроку();
			ТекстЗапросаИзФайла = ТекстЗапросаИзФайла + СокрП(ОчереднаяСтрока) + Символы.ПС;
		КонецЦикла;

		СоздатьНовыйЗапрос(ТекстЗапросаИзФайла, ИмяФайла);

	Исключение
		Результат = ОписаниеОшибки();
	КонецПопытки;

	Попытка
		ЧтениеТекста.Закрыть();
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

&НаКлиенте
Функция СохранитьТекстЗапросаВФайл(пПутьКФайлу, ТекстЗапросаДляСохранения)
	Результат = "";

	ЗаписьФайла = Новый ЗаписьТекста;
	Попытка
		ЗаписьФайла.Открыть(пПутьКФайлу);
		ЗаписьФайла.Записать(ТекстЗапросаДляСохранения);
	Исключение
		Результат = ОписаниеОшибки();
	КонецПопытки;

	Попытка
		ЗаписьФайла.Закрыть();
	Исключение
	КонецПопытки;

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияКонструктора(Результат, ПараметрыКонструктора) Экспорт

	Если Не ПустаяСтрока(Результат) Тогда
		ТекстЗапроса = СокрЛП(Результат);
		СтрокаТЗ = ПолучитьСтрокуТЗЗапросы();
		СтрокаТЗ.ТекстЗапроса = ТекстЗапроса;
		ПолучитьПараметрыИзЗапросаНаСервере();
		Элементы.ГруппаЗапросыМетаданныеПараметры.ТекущаяСтраница = Элементы.ГруппаТекстЗапроса;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуЭлементаКоманда(ИмяЭлемента, пПометка)
	;
	Элементы[ИмяЭлемента].Пометка = пПометка;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьДоступностьЭлементовФормы()
	;
	
	Если Элементы.КомандаТекстЗапросаНаВсюФорму.Пометка Тогда
		Элементы.ГруппаЗапросыМетаданныеПараметры.ТекущаяСтраница = Элементы.ГруппаТекстЗапроса;
		Элементы.ФормаГруппаСимволы.Видимость = Истина;
	КонецЕсли;

	Элементы.ГруппаСписокЗапросовСтраницы.Видимость = Не Элементы.КомандаВыборкаДанныхЗапросаНаВсюФорму.Пометка;
	Элементы.ГрВыборкаДанныхЗапроса.Видимость 		= Не Элементы.КомандаТекстЗапросаНаВсюФорму.Пометка
		Или Элементы.КомандаВыборкаДанныхЗапросаНаВсюФорму.Пометка;
	Элементы.ФормаГруппаСимволы.Видимость 			= Не Элементы.КомандаВыборкаДанныхЗапросаНаВсюФорму.Пометка;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИСохранитьВФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьИСохранитьВФайлНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьИСохранитьВФайлНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	УстановитьПараметры(Запрос);

	Попытка

		ДатаДоВыполненияЗапроса = ТекущаяДата();
		РезультатВыполненияЗапроса = ?(ПакетныйЗапрос, Запрос.ВыполнитьПакет(), Запрос.Выполнить());
		ДатаПослеВыполненияЗапроса = ТекущаяДата();
		//@skip-warning
		ВремяВыполнения = ДатаПослеВыполненияЗапроса - ДатаДоВыполненияЗапроса;

	Исключение
		Сообщить("При выполнении запроса произошла ошибка: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	ТЗВыборка = ?(ПакетныйЗапрос, РезультатВыполненияЗапроса[НомерЗапросаВПакете].Выгрузить(),
		РезультатВыполненияЗапроса.Выгрузить());

	Сообщить(Формат(ТекущаяДата(), "ДФ='yyyy.MM.dd HH.mm.ss'") + ": выгрузка начата");
	ЗаписьТекста = Новый ЗаписьТекста(ВыгрузкаВФайлПутьКФайлу, ?(ПустаяСтрока(ВыгрузкаВФайлКодировкаФайла),
		КодировкаТекста.UTF16, ВыгрузкаВФайлКодировкаФайла));

	Счетчик = 0;
	Для Каждого СтрокаТЗ Из ТЗВыборка Цикл

		Счетчик = Счетчик + 1;

		Если ВыгрузкаВФайлНумероватьСтроки И Не ВыгрузкаВФайлВыводитьНомерПоследнейКолонкой Тогда
			ЗаписьТекста.Записать(Формат(ВыгрузкаВФайлНачинатьНумерациюСНомера + Счетчик - 1, "ЧГ="));
			ЗаписьТекста.Записать(РазделительКолонок);
		КонецЕсли;

		СохранитьСтрокуТЗВФайл(СтрокаТЗ, ТЗВыборка.Колонки, ЗаписьТекста);

		Если ВыгрузкаВФайлНумероватьСтроки И ВыгрузкаВФайлВыводитьНомерПоследнейКолонкой Тогда
			ЗаписьТекста.Записать(Формат(ВыгрузкаВФайлНачинатьНумерациюСНомера + Счетчик - 1, "ЧГ="));
			ЗаписьТекста.Записать(РазделительКолонок);
		КонецЕсли;

		ЗаписьТекста.Записать(Символы.ПС);
	КонецЦикла;

	Сообщить(Формат(ТекущаяДата(), "ДФ='yyyy.MM.dd HH.mm.ss'") + ": выгрузка завершена (число строк: " + Счетчик + ")");

КонецПроцедуры

&НаСервере
Процедура СохранитьВыборкуВФайлНаСервере()

	Сообщить(Формат(ТекущаяДата(), "ДФ='yyyy.MM.dd HH.mm.ss'") + ": выгрузка начата");

	ЗаписьТекста = Новый ЗаписьТекста(ВыгрузкаВФайлПутьКФайлу, ?(ПустаяСтрока(ВыгрузкаВФайлКодировкаФайла),
		КодировкаТекста.UTF16, ВыгрузкаВФайлКодировкаФайла));

	Колонки = Элементы.Найти("ТЗ").ПодчиненныеЭлементы;
	Счетчик = 0;
	Для Каждого СтрокаТЗ Из ЭтаФорма["ТЗ"] Цикл

		Счетчик = Счетчик + 1;

		Если ВыгрузкаВФайлНумероватьСтроки И Не ВыгрузкаВФайлВыводитьНомерПоследнейКолонкой Тогда
			ЗаписьТекста.Записать(Формат(ВыгрузкаВФайлНачинатьНумерациюСНомера + Счетчик - 1, "ЧГ="));
			ЗаписьТекста.Записать(РазделительКолонок);
		КонецЕсли;

		СохранитьСтрокуТЗВФайл(СтрокаТЗ, Колонки, ЗаписьТекста);

		Если ВыгрузкаВФайлНумероватьСтроки И ВыгрузкаВФайлВыводитьНомерПоследнейКолонкой Тогда
			ЗаписьТекста.Записать(Формат(ВыгрузкаВФайлНачинатьНумерациюСНомера + Счетчик - 1, "ЧГ="));
			ЗаписьТекста.Записать(РазделительКолонок);
		КонецЕсли;

		ЗаписьТекста.Записать(Символы.ПС);

	КонецЦикла;

	Сообщить(Формат(ТекущаяДата(), "ДФ='yyyy.MM.dd HH.mm.ss'") + ": выгрузка завершена (число строк: " + Счетчик + ")");

КонецПроцедуры

&НаСервере
Процедура СохранитьСтрокуТЗВФайл(СтрокаТЗ, КолонкиТЗ, ЗаписьТекста)

	КоличествоКолонок = КолонкиТЗ.Количество();
	Для НомерТекущейКолонки = 0 По КоличествоКолонок - 1 Цикл

		ИмяКолонки = КолонкиТЗ[НомерТекущейКолонки].Имя;
		ЗначениеЯчейки =  СтрокаТЗ[ИмяКолонки];

		Если ТипЗнч(ЗначениеЯчейки) = Тип("Дата") Тогда

			Если ВыгрузкаВФайлДобавлять2000КРеквизитамТипаДата Тогда
				ЗначениеЯчейки = ДобавитьМесяц(ЗначениеЯчейки, 2000 * 12);
			КонецЕсли;

			ЗначениеЯчейки = Формат(ЗначениеЯчейки, "ДФ='" + ВыгрузкаВФайлФорматРеквизитовТипаДата + "'");

		ИначеЕсли ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда

			ЗначениеЯчейки = Формат(ЗначениеЯчейки, "ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=");

		Иначе

			ЗначениеЯчейки = Строка(ЗначениеЯчейки);
			ЗначениеЯчейки = СтрЗаменить(ЗначениеЯчейки, РазделительКолонок,
				ВыгрузкаВФайлЗаменятьСимволРазделителяКолонокНа);

			Если ВыгрузкаВФайлУдалятьСпецСимволы И НомерТекущейКолонки
				= ВыгрузкаВФайлНомерКолонкиДляУдаленияСпецсимволов Тогда
				ЗначениеЯчейки = УдалитьСпецсимволыВСтроке(ЗначениеЯчейки);
			КонецЕсли;

			Если ВыгрузкаВФайлПриводитьКВерхнемуРегистру Тогда
				ЗначениеЯчейки = ВРег(ЗначениеЯчейки);
			КонецЕсли;

			Если ВыгрузкаВФайлПриводитьКНижнемуРегистру Тогда
				ЗначениеЯчейки = НРег(ЗначениеЯчейки);
			КонецЕсли;

			Если ВыгрузкаВФайлУдалятьНезначащиеСимволы Тогда
				ЗначениеЯчейки = СокрЛП(ЗначениеЯчейки);
			КонецЕсли;

		КонецЕсли;

		ЗаписьТекста.Записать(ЗначениеЯчейки);

		Если (ВыгрузкаВФайлВыводитьРазделительПослеПоследнейКолонки И НомерТекущейКолонки = КоличествоКолонок - 1)
			Или НомерТекущейКолонки <> КоличествоКолонок - 1 Тогда
			ЗаписьТекста.Записать(РазделительКолонок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройки()

	Элементы.ВыгрузкаВФайлКодировкаФайла.СписокВыбора.Добавить("windows-1251", "windows-1251");
	Элементы.ВыгрузкаВФайлКодировкаФайла.СписокВыбора.Добавить("cp866", "");
	Элементы.ВыгрузкаВФайлКодировкаФайла.СписокВыбора.Добавить("UTF-8", "UTF-8");
	Элементы.ВыгрузкаВФайлКодировкаФайла.СписокВыбора.Добавить("UTF-16", "UTF-16");
	Элементы.ВыгрузкаВФайлКодировкаФайла.СписокВыбора.Добавить("UTF-32", "UTF-32");
	Элементы.ВыгрузкаВФайлКодировкаФайла.СписокВыбора.Добавить("UTF-7", "UTF-7");
	Элементы.ВыгрузкаВФайлКодировкаФайла.СписокВыбора.Добавить("KOI8-R", "KOI8-R");

	Элементы.ФорматРеквизитовТипаДата.СписокВыбора.Добавить("dd.MM.yyyy", "dd.MM.yyyy");
	Элементы.ФорматРеквизитовТипаДата.СписокВыбора.Добавить("dd-MM-yyyy", "dd-MM-yyyy");
	Элементы.ФорматРеквизитовТипаДата.СписокВыбора.Добавить("yyyy.MM.dd", "yyyy.MM.dd");
	Элементы.ФорматРеквизитовТипаДата.СписокВыбора.Добавить("yyyy-MM-dd", "yyyy-MM-dd");
	Элементы.ФорматРеквизитовТипаДата.СписокВыбора.Добавить("dd.MM.yyyy HH:mm:ss", "dd.MM.yyyy HH:mm:ss");
	Элементы.ФорматРеквизитовТипаДата.СписокВыбора.Добавить("dd-MM-yyyy HH:mm:ss", "dd-MM-yyyy HH:mm:ss");
	Элементы.ФорматРеквизитовТипаДата.СписокВыбора.Добавить("yyyy.MM.dd HH:mm:ss", "yyyy.MM.dd HH:mm:ss");
	Элементы.ФорматРеквизитовТипаДата.СписокВыбора.Добавить("yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss");

	РазделительКолонок = ";";
	ВыгрузкаВФайлЗаменятьСимволРазделителяКолонокНа = ",";
	ВыгрузкаВФайлФорматРеквизитовТипаДата = "yyyy.MM.dd HH:mm:ss";
	МаксимальноеЧислоСтрокВыводимыхНаФорму = 500;
	ВыгрузкаВФайлКодировкаФайла = "UTF-16";
	ВыгрузкаВФайлНачинатьНумерациюСНомера = 1;
	ВыгрузкаВФайлВыводитьРазделительПослеПоследнейКолонки = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЗапрос(ТекстНовогоЗапроса = "", НаименованиеНовогоЗапроса = "")

	НомерЗапроса = ПолучитьСледующийНомерЗапроса();

	НоваяСтрокаСпискаЗапросов = СписокЗапросов.Добавить();
	НоваяСтрокаСпискаЗапросов.НомерЗапроса 		= НомерЗапроса;
	НоваяСтрокаСпискаЗапросов.ИмяЗапроса 	= ?(ПустаяСтрока(НаименованиеНовогоЗапроса), "Запрос " + НомерЗапроса,
		НаименованиеНовогоЗапроса);
	НоваяСтрокаСпискаЗапросов.ТекстЗапроса 		= ТекстНовогоЗапроса;
	НоваяСтрокаСпискаЗапросов.ВремяВыполнения 	= -1;

	Элементы.ГруппаТекстЗапроса.Заголовок = "Текст запроса";
	СоздатьНовыйЗапросНаСервере(НомерЗапроса);
	ОтобразитьЭлементыФормыНаУказаннойВкладке("ГруппаЗапрос" + НомерЗапроса);
	Элементы.ГруппаСписокЗапросовСтраницы.ТекущаяСтраница = Элементы["ГруппаЗапрос" + НомерЗапроса];

КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйЗапросНаСервере(НомерЗапроса)

	ЭлементГруппа = Элементы.Добавить("ГруппаЗапрос" + НомерЗапроса, Тип("ГруппаФормы"),
		Элементы.ГруппаСписокЗапросовСтраницы);
	ЭлементГруппа.Вид = ВидГруппыФормы.Страница;
	ЭлементГруппа.Заголовок = НомерЗапроса;
	
	//Размещение вкладки перед вкладкой с минимальным бОльшим номером
	ТЗСписокЗапросов = СписокЗапросов.Выгрузить( , "НомерЗапроса");
	ТЗСписокЗапросов.Сортировать("НомерЗапроса Возр");

	НомерСледующегоЗапроса = 0;
	Для Каждого СтрокаТЗ Из ТЗСписокЗапросов Цикл

		Если СтрокаТЗ.НомерЗапроса > НомерЗапроса Тогда

			НомерСледующегоЗапроса = СтрокаТЗ.НомерЗапроса;
			Прервать;

		КонецЕсли;

	КонецЦикла;
	
	//Не найден номер, бОльший текущего
	Если НомерСледующегоЗапроса = 0 Тогда
		Элементы.Переместить(ЭлементГруппа, Элементы.ГруппаСписокЗапросовСтраницы);
	Иначе
		Элементы.Переместить(ЭлементГруппа, Элементы.ГруппаСписокЗапросовСтраницы, Элементы["ГруппаЗапрос"
			+ НомерСледующегоЗапроса]);
	КонецЕсли;
	
	//Элемент, который необходимо сделать видимым после активизации другой страницы
	ЭлементДекорация = Элементы.Добавить("ГруппаЗапрос" + НомерЗапроса + "Заглушка", Тип("ДекорацияФормы"),
		ЭлементГруппа);
	ЭлементДекорация.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗапрос(Знач НомерЗапроса)

	СписокЗапросов.Удалить(ПолучитьСтрокуТЗЗапросы(НомерЗапроса));
	ИмяГруппыДляПереносаЭлементов = "ГруппаЗапрос" + СписокЗапросов[0].НомерЗапроса;
	ОтобразитьЭлементыФормыНаУказаннойВкладке(ИмяГруппыДляПереносаЭлементов);
	Элементы.ГруппаСписокЗапросовСтраницы.ТекущаяСтраница = Элементы[ИмяГруппыДляПереносаЭлементов];

	УдалитьЗапросНаСервере(НомерЗапроса, ИмяГруппыДляПереносаЭлементов);

КонецПроцедуры

&НаСервере
Процедура УдалитьЗапросНаСервере(НомерЗапроса, ИмяГруппыДляПереносаЭлементов)

	Элементы.Удалить(Элементы["ГруппаЗапрос" + НомерЗапроса]);

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьЭлементыФормыНаУказаннойВкладке(ИмяГруппы)

	Элементы.ГруппаТекстЗапроса.Доступность = Истина;
	СтрокаТЗ = ПолучитьСтрокуТЗЗапросы( , ИмяГруппы);
	НомерТекущегоЗапроса 	= СтрокаТЗ.НомерЗапроса;
	ИмяТекущегоЗапроса 		= СтрокаТЗ.ИмяЗапроса;
	Элементы.ТекстЗапроса.Доступность 			= Истина;
	Элементы.ФормаКоманднаяПанель.Доступность 	= Истина;

	ТекстВыбранногоЗапроса = СтрокаТЗ.ТекстЗапроса;

	Если СтрокаТЗ.ВремяВыполнения >= 0 Тогда
		Элементы.ГруппаТекстЗапроса.Заголовок = "Текст запроса (время выполнения: " + ПолучитьПериодСтрокой(
			СтрокаТЗ.ВремяВыполнения) + ", число строк: " + СтрокаТЗ.ЧислоСтрок + ")";
	Иначе
		Элементы.ГруппаТекстЗапроса.Заголовок = "Текст запроса";
	КонецЕсли;

	ТекстЗапроса = ТекстВыбранногоЗапроса;

	ОтобразитьЭлементыФормыНаУказаннойВкладкеНаСервере(ИмяГруппы);

КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭлементыФормыНаУказаннойВкладкеНаСервере(ИмяГруппы)
	
	//После переноса полчиненных элементов из страницы она станет невидимой,
	//поэтому необходимо разместить там какой-нибудь элемент
	Элементы[Элементы.ГруппаЗапросыМетаданныеПараметры.Родитель.Имя + "Заглушка"].Видимость = Истина;
	Элементы[ИмяГруппы + "Заглушка"].Видимость = Ложь;
	Элементы.Переместить(Элементы.ГруппаЗапросыМетаданныеПараметры, Элементы[ИмяГруппы]);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуТЗЗапросы(НомерЗапроса = Неопределено, ИмяГруппы = Неопределено)

	Если НомерЗапроса <> Неопределено Тогда
		СтрокаТЗ = СписокЗапросов.НайтиСтроки(Новый Структура("НомерЗапроса", НомерЗапроса))[0];
	ИначеЕсли ИмяГруппы <> Неопределено Тогда
		СтрокаТЗ = СписокЗапросов.НайтиСтроки(Новый Структура("НомерЗапроса", Число(Сред(ИмяГруппы, 13))))[0];
	Иначе
		ИмяГруппы = Элементы.ГруппаСписокЗапросовСтраницы.ТекущаяСтраница.Имя;
		СтрокаТЗ = СписокЗапросов.НайтиСтроки(Новый Структура("НомерЗапроса", Число(Сред(ИмяГруппы, 13))))[0];
	КонецЕсли;

	Возврат СтрокаТЗ;

КонецФункции


//ФУНКЦИИ РАБОТЫ С ТЕКСТОМ ЗАПРОСА
&НаКлиенте
Функция ПолучитьТекстТекущегоЗапроса()

	РабочийТекстЗапроса = ?(ПустаяСтрока(Элементы.ТекстЗапроса.ВыделенныйТекст), ТекстЗапроса,
		Элементы.ТекстЗапроса.ВыделенныйТекст);
	
	//Добавление текстов вложенных запросов
	РабочийТекстЗапроса = ПодставитьТекстыВложенныхЗапросов(РабочийТекстЗапроса);

	РабочийТекстЗапроса = СтрЗаменить(РабочийТекстЗапроса, "|", ""); 
	
	//Удаление комментариев
	РабочийТекстЗапроса = ВырезатьКоментарии(РабочийТекстЗапроса);

	Возврат РабочийТекстЗапроса;
КонецФункции

&НаКлиенте
Функция ПолучитьТекстТекущегоЗапросаДляСохранения()

	РабочийТекстЗапроса = ?(ПустаяСтрока(Элементы.ТекстЗапроса.ВыделенныйТекст), ТекстЗапроса,
		Элементы.ТекстЗапроса.ВыделенныйТекст);

	Возврат РабочийТекстЗапроса;

КонецФункции

&НаКлиенте
Функция ВырезатьКоментарии(ИсходныйТекст)
	НомерСимволаКомментария = Найти(ИсходныйТекст, "--");

	Если НомерСимволаКомментария = 0 Тогда
		НомерСимволаКомментария = Найти(ИсходныйТекст, "//");
	КонецЕсли;

	Если НомерСимволаКомментария = 0 Тогда
		Возврат ИсходныйТекст;
	КонецЕсли;
	
	//Находим левую часть строки: до комментария
	ЛеваяЧасть = Лев(ИсходныйТекст, НомерСимволаКомментария - 1);
	ПраваяЧастьВключаяКомментарий = Сред(ИсходныйТекст, НомерСимволаКомментария);
	
	//Находим номер первого символа перевода строки после комментария
	НомерСимволаПереводаСтроки = Найти(ПраваяЧастьВключаяКомментарий, Символы.ПС);
	Если НомерСимволаПереводаСтроки = 0 Тогда
		Возврат ЛеваяЧасть;
	КонецЕсли;
	
	//Получаем правую часть строки: после символа перевода строки,		
	ПраваяЧасть = Сред(ПраваяЧастьВключаяКомментарий, НомерСимволаПереводаСтроки + 1);
		
	//добавляем перевод строки, чтобы разные строки не склеивались	
	ИтоговаяСтрока = СокрЛП(ЛеваяЧасть) + Символы.ПС + ПраваяЧасть;

	ИтоговаяСтрокаПослеРекурсивногоВызова = ВырезатьКоментарии(ИтоговаяСтрока);
	Возврат ИтоговаяСтрокаПослеРекурсивногоВызова;
КонецФункции

&НаКлиенте
Функция ПодставитьТекстыВложенныхЗапросов(ИсходныйТекст)
	НомерСимвола = Найти(ИсходныйТекст, "&Запрос");
	Если НомерСимвола = 0 Тогда
		Возврат ИсходныйТекст;
	КонецЕсли;
	
	//Находим левую часть строки: до символов &Запрос
	ЛеваяЧасть = Лев(ИсходныйТекст, НомерСимвола - 1);
	ПраваяЧастьСНомеромВложенногоЗапроса = Сред(ИсходныйТекст, НомерСимвола + 7);
	
	//Находим номер первого пробела или перевода строки после символов &Запрос
	//т.е. место окончания номера вложенного запроса
	НомерСимволаПробел = Найти(ПраваяЧастьСНомеромВложенногоЗапроса, " ");
	НомерСимволаПереводСтроки = Найти(ПраваяЧастьСНомеромВложенногоЗапроса, Символы.ПС);
	НомерСимволаСкобка = Найти(ПраваяЧастьСНомеромВложенногоЗапроса, ")");
	Если НомерСимволаПробел = 0 Тогда
		Если НомерСимволаПереводСтроки = 0 Тогда
			Если НомерСимволаСкобка = 0 Тогда
				НомерСимволаПослеНомераВложенногоЗапроса = 0;
			Иначе
				НомерСимволаПослеНомераВложенногоЗапроса = НомерСимволаПробел;
			КонецЕсли;
		Иначе
			НомерСимволаПослеНомераВложенногоЗапроса = НомерСимволаПереводСтроки;
		КонецЕсли;
	Иначе
		НомерСимволаПослеНомераВложенногоЗапроса = НомерСимволаПробел;
	КонецЕсли;

	//Если строка исходного запроса заканчивается названием вложенного запроса
	Если НомерСимволаПослеНомераВложенногоЗапроса = 0 Тогда
		НомерЗапроса = СокрЛП(ПраваяЧастьСНомеромВложенногоЗапроса);
	Иначе
		НомерЗапроса = СокрЛП(Сред(ПраваяЧастьСНомеромВложенногоЗапроса, 1, НомерСимволаПослеНомераВложенногоЗапроса
			- 2));
	КонецЕсли;

	Если ПустаяСтрока(НомерЗапроса) Тогда
		Сообщить("Ошибка: невозможно подставить вложенный запрос, т.к. номер запроса не задан.");
		Возврат "";
	КонецЕсли;

	ТекстВложенногоЗапроса = ПолучитьТекстЗапросаПоНомеру(НомерЗапроса);

	Если ПустаяСтрока(ТекстВложенногоЗапроса) Тогда
		Сообщить("Ошибка: невозможно подставить вложенный запрос, т.к. не существует запроса с номером " + НомерЗапроса
			+ ".");
		Возврат "";
	КонецЕсли;
	
	//Если строка исходного запроса заканчивается названием вложенного запроса
	Если НомерСимволаПослеНомераВложенногоЗапроса = 0 Тогда
		Возврат ЛеваяЧасть + " " + ТекстВложенногоЗапроса;
	КонецЕсли;	
	
	//Получаем правую часть строки: после названия вложенного запроса	
	ПраваяЧасть = Сред(ПраваяЧастьСНомеромВложенногоЗапроса, НомерСимволаПослеНомераВложенногоЗапроса - 1);

	ИтоговаяСтрока = СокрЛП(ЛеваяЧасть) + " " + ТекстВложенногоЗапроса + ПраваяЧасть;

	ИтоговаяСтрокаПослеРекурсивногоВызова = ПодставитьТекстыВложенныхЗапросов(ИтоговаяСтрока);
	Возврат ИтоговаяСтрокаПослеРекурсивногоВызова;

КонецФункции

&НаКлиенте
Функция ПолучитьТекстЗапросаПоНомеру(Номер)
	Результат = "";
	Отбор = Новый Структура;
	Отбор.Вставить("НомерЗапроса", Число(Номер));
	НайденныеСтроки = СписокЗапросов.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Результат = ВырезатьКоментарии(НайденныеСтроки[0].ТекстЗапроса);
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура УдалитьСимволыВертикальнаяЧерта()
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Символы.ПС + "|", Символы.ПС);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "|", "");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСимволыВертикальнаяЧерта()
	УдалитьСимволыВертикальнаяЧерта();
	ТекстЗапроса = "|" + ТекстЗапроса;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Символы.ПС, Символы.ПС + "|");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСимволыКомментария()

	Перем ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка;

	Элементы.ТекстЗапроса.ПолучитьГраницыВыделения(ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка);

	Если ПерваяСтрока = 1 Тогда
		ТекстЗапроса = "//" + ТекстЗапроса;
	КонецЕсли;

	НомерСимволаПСВОбрабатываемойСтроке = 0;
	НомерСимволаПСВТекстеЗапроса = 0;
	Для НомерСтроки = 2 По ПоследняяСтрока Цикл
		ОбрабатываемыйТекст = Сред(ТекстЗапроса, НомерСимволаПСВТекстеЗапроса + 1);
		НомерСимволаПСВОбрабатываемойСтроке = Найти(ОбрабатываемыйТекст, Символы.ПС);
		НомерСимволаПСВТекстеЗапроса = НомерСимволаПСВТекстеЗапроса + НомерСимволаПСВОбрабатываемойСтроке;

		Если НомерСтроки >= ПерваяСтрока Тогда
			ТекстЗапроса = Сред(ТекстЗапроса, 1, НомерСимволаПСВТекстеЗапроса) + "//" + Сред(ТекстЗапроса,
				НомерСимволаПСВТекстеЗапроса + 1);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСимволыКомментария()
	Перем ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка, НомерПоследнегоСимволаВОбрабатываемойСтроке, НомерПервогоСимволаСтрокиВТекстеЗапроса, НомерПоследнегоСимволаСтрокиВТекстеЗапроса;

	Элементы.ТекстЗапроса.ПолучитьГраницыВыделения(ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка);

	НомерПервогоСимволаСтрокиВТекстеЗапроса = 1;
	НомерПоследнегоСимволаСтрокиВТекстеЗапроса = 0;

	Для НомерСтроки = 1 По ПоследняяСтрока Цикл

		ОбрабатываемыйТекст = Сред(ТекстЗапроса, НомерПервогоСимволаСтрокиВТекстеЗапроса);

		НомерПоследнегоСимволаВОбрабатываемойСтроке = Найти(ОбрабатываемыйТекст, Символы.ПС);

		НомерПоследнегоСимволаСтрокиВТекстеЗапроса = НомерПоследнегоСимволаСтрокиВТекстеЗапроса
			+ НомерПоследнегоСимволаВОбрабатываемойСтроке;

		Если НомерСтроки >= ПерваяСтрока Тогда
			//Если это последняя строка, т.е. не найдено символов ПС, вызываем функцию Сред без указания длины строки
			ИсходнаяСтрокаСКомментариями = ?(НомерПоследнегоСимволаВОбрабатываемойСтроке = 0, Сред(ТекстЗапроса,
				НомерПервогоСимволаСтрокиВТекстеЗапроса), Сред(ТекстЗапроса, НомерПервогоСимволаСтрокиВТекстеЗапроса,
				НомерПоследнегоСимволаСтрокиВТекстеЗапроса - НомерПервогоСимволаСтрокиВТекстеЗапроса));

			ИзмененнаяСтрокаСКомментариями = УдалитьСимволыКомментарияИзСтроки(ИсходнаяСтрокаСКомментариями);

			Если ИсходнаяСтрокаСКомментариями <> ИзмененнаяСтрокаСКомментариями Тогда
				ТекстЗапроса = Сред(ТекстЗапроса, 1, НомерПервогоСимволаСтрокиВТекстеЗапроса - 1) + ИзмененнаяСтрокаСКомментариями
					+ ?(НомерПоследнегоСимволаВОбрабатываемойСтроке = 0, "", Сред(ТекстЗапроса,
					НомерПоследнегоСимволаСтрокиВТекстеЗапроса));
						
				//Еслит длина строки изменилась, корректируем значение переменной
				НомерПоследнегоСимволаСтрокиВТекстеЗапроса = НомерПоследнегоСимволаСтрокиВТекстеЗапроса + (СтрДлина(
					ИзмененнаяСтрокаСКомментариями) - СтрДлина(ИсходнаяСтрокаСКомментариями));
			КонецЕсли;
		КонецЕсли;

		НомерПервогоСимволаСтрокиВТекстеЗапроса = НомерПоследнегоСимволаСтрокиВТекстеЗапроса + 1;

	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция УдалитьСимволыКомментарияИзСтроки(Знач СтрокаСКомментариями)

	Перем СимволыНайдены, ВНачалеСтроки;

	НомерСимволовКомментария = Найти(СтрокаСКомментариями, "//");

	СимволыНайдены = НомерСимволовКомментария > 0;

	Если СимволыНайдены Тогда
		//удаляем символы комментария только, если слева нет значащих символов
		ПодстрокаПередКомментарием = Сред(СтрокаСКомментариями, 1, НомерСимволовКомментария - 1);
		ВНачалеСтроки = ПустаяСтрока(ПодстрокаПередКомментарием);
	КонецЕсли;
	
	//Если нет символов // или они среди значащих символов, ищем символы --
	Если Не СимволыНайдены Или Не ВНачалеСтроки Тогда
		НомерСимволовКомментария = Найти(СтрокаСКомментариями, "--");

		СимволыНайдены = НомерСимволовКомментария > 0;

		Если СимволыНайдены Тогда
			//удаляем символы комментария только, если слева нет значащих символов
			ПодстрокаПередКомментарием = Сред(СтрокаСКомментариями, 1, НомерСимволовКомментария - 1);
			ВНачалеСтроки = ПустаяСтрока(ПодстрокаПередКомментарием);
		КонецЕсли;

	КонецЕсли;
	
		
	//Склеиваем результирующую строку	
	Если СимволыНайдены И ВНачалеСтроки Тогда
		РезультирующаяСтрока = Сред(СтрокаСКомментариями, 1, НомерСимволовКомментария - 1)
			//если справа от символов комментария не было знаков, ничего не прибавляем и к результирующей строке

			+ ?(СтрДлина(СтрокаСКомментариями) = (НомерСимволовКомментария + 1), "", Сред(СтрокаСКомментариями,
			НомерСимволовКомментария + 2));
	Иначе
		РезультирующаяСтрока = СтрокаСКомментариями;
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции

&НаСервере
Процедура ПолучитьПараметрыИзЗапросаНаСервере()

	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		Сообщить("Ошибка при получении списка параметров: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		ИмяПараметра = ПараметрЗапроса.Имя;
		НайденныеПараметры = СписокПараметров.НайтиСтроки(Новый Структура("ИмяПараметра", ИмяПараметра));
		Если НайденныеПараметры.Количество() = 0 Тогда
			ТекущийПараметр = СписокПараметров.Добавить();
			ТекущийПараметр.ИмяПараметра = ИмяПараметра;
		Иначе
			ТекущийПараметр = НайденныеПараметры[0];
		КонецЕсли;

		ТекущийПараметр.ЗначениеПараметра = ПараметрЗапроса.ТипЗначения.ПривестиЗначение(
			ТекущийПараметр.ЗначениеПараметра);
		ТекущийПараметр.ТипПараметра = ТипЗнч(ТекущийПараметр.ЗначениеПараметра);
	КонецЦикла;
КонецПроцедуры


//ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ
&НаСервере
Процедура ОбновитьТаблицуНаФорме(РезультатВыполненияЗапроса, ЧислоСтрок)

	ЭлементТЗ = Элементы.Найти("ТЗ");
	Если Не ЭлементТЗ = Неопределено Тогда
		Элементы.Удалить(ЭлементТЗ);
		МассивУдаляемыхРеквизитов = Новый Массив;
		МассивУдаляемыхРеквизитов.Добавить("ТЗ");
		ИзменитьРеквизиты( , МассивУдаляемыхРеквизитов);
	КонецЕсли;

	ТЗВыборка = ?(ПакетныйЗапрос, РезультатВыполненияЗапроса[НомерЗапросаВПакете].Выгрузить(),
		РезультатВыполненияЗапроса.Выгрузить());
	КоличествоКолонок = ТЗВыборка.Колонки.Количество();

	МассивДобавляемыхРеквизитов = Новый Массив;

	МассивДобавляемыхРеквизитов.Добавить(
		Новый РеквизитФормы("ТЗ", Новый ОписаниеТипов("ТаблицаЗначений")));
	Массив = Новый Массив;
	Массив.Добавить(Тип("NULL"));

	Для НомерТекущейКолонки = 0 По КоличествоКолонок - 1 Цикл

		ИмяКолонки = ТЗВыборка.Колонки[НомерТекущейКолонки].Имя;

		МассивДобавляемыхРеквизитов.Добавить(
			Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов(ТЗВыборка.Колонки[НомерТекущейКолонки].ТипЗначения, ,
			Массив), "ТЗ"));

	КонецЦикла;

	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

	ЭлементТЗ = Элементы.Добавить("ТЗ", Тип("ТаблицаФормы"), Элементы.ГрВыборкаДанныхЗапроса);
	ЭлементТЗ.ПутьКДанным = "ТЗ";
	ЭлементТЗ.Отображение = ОтображениеТаблицы.Список;
	ЭлементТЗ.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементТЗ.ТолькоПросмотр = Истина;
	ЭлементТЗ.УстановитьДействие("Выбор", "ТЗВыбор");

	Для НомерТекущейКолонки = 0 По КоличествоКолонок - 1 Цикл

		ИмяКолонки = ТЗВыборка.Колонки[НомерТекущейКолонки].Имя;

		Попытка
			НовыйЭлемент = Элементы.Добавить(
				ИмяКолонки, Тип("ПолеФормы"), ЭлементТЗ);

			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "ТЗ." + ИмяКолонки;
			НовыйЭлемент.ТолькоПросмотр = Истина;
			НовыйЭлемент.ВыделятьОтрицательные = Не ВыводитьОтрицательныеЧислаЧернымЦветом;
		Исключение
		КонецПопытки;
	КонецЦикла;

	ЧислоСтрокВыборки = ТЗВыборка.Количество();
	Если МаксимальноеЧислоСтрокВыводимыхНаФорму = 0 Или ЧислоСтрокВыборки <= МаксимальноеЧислоСтрокВыводимыхНаФорму Тогда
		ЗначениеВРеквизитФормы(ТЗВыборка, "ТЗ");
	Иначе
		РеквизитТЗ = ЭтаФорма["ТЗ"];
		СчетчикСтрок = 0;
		Для Каждого СтрокаВыборкиТЗ Из ТЗВыборка Цикл
			СтрокаРеквизитаТЗ = РеквизитТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитаТЗ, СтрокаВыборкиТЗ);
			СчетчикСтрок = СчетчикСтрок + 1;
			Если СчетчикСтрок = МаксимальноеЧислоСтрокВыводимыхНаФорму Тогда
				Сообщить("На форму выведено первых " + МаксимальноеЧислоСтрокВыводимыхНаФорму + " строк из "
					+ ЧислоСтрокВыборки);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ЧислоСтрок = ТЗВыборка.Количество();

КонецПроцедуры

&НаКлиенте
Процедура ВключитьЭлементыДляЗапросов(Включить = Истина)
	Если Не Включить Тогда
		ТекстЗапроса = "";
	КонецЕсли;
	Элементы.ТекстЗапроса.Доступность = Включить;
	Элементы.ФормаКоманднаяПанель.Доступность = Включить;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметры(Запрос)
	Для Каждого Параметр Из СписокПараметров Цикл
		Если ТипЗнч(Параметр.ЗначениеПараметра) <> Тип("Неопределено") Тогда
			Запрос.УстановитьПараметр(Параметр.ИмяПараметра, Параметр.ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекстТекущегоЗапроса()

	СтрокаТЗ = СписокЗапросов.НайтиСтроки(Новый Структура("НомерЗапроса", Число(Сред(
		Элементы.ГруппаСписокЗапросовСтраницы.ТекущаяСтраница.Имя, 13))))[0];
	СтрокаТЗ.ТекстЗапроса = ТекстЗапроса;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСледующийНомерЗапроса()

	НомерЗапроса = 1;

	ЧислоЗапросов = СписокЗапросов.Количество();

	Для Счетчик = 1 По ЧислоЗапросов + 1 Цикл
		Если СписокЗапросов.НайтиСтроки(Новый Структура("НомерЗапроса", Счетчик)).Количество() = 0 Тогда
			НомерЗапроса = Счетчик;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат НомерЗапроса;
КонецФункции

&НаКлиенте
Функция ПолучитьПериодСтрокой(ЧислоСекундВсего)

	ПериодСтрокой = "";

	Если ЧислоСекундВсего = 0 Тогда
		ПериодСтрокой = "< 1";
	Иначе

		ЧислоЧасов 	= Цел(ЧислоСекундВсего / 3600);
		ЧислоМинут 	= Цел((ЧислоСекундВсего - ЧислоЧасов * 3600) / 60);
		ЧислоСекунд = ЧислоСекундВсего - ЧислоЧасов * 3600 - ЧислоМинут * 60;

		ПериодСтрокой 
			= ?(ЧислоЧасов = 0, "", Строка(ЧислоЧасов) + " ч. ") + ?(ЧислоМинут = 0, "", Строка(ЧислоМинут) + " мин. ")
			+ ЧислоСекунд + " сек.";
	КонецЕсли;

	Возврат ПериодСтрокой
КонецФункции

&НаСервере
Функция УдалитьСпецсимволыВСтроке(пСтрока)
	пСтрока = СтрЗаменить(пСтрока, " ", ""); // Символ(160)
	пСтрока = СтрЗаменить(пСтрока, " ", "");
	пСтрока = СтрЗаменить(пСтрока, "(", "");
	пСтрока = СтрЗаменить(пСтрока, ")", "");
	пСтрока = СтрЗаменить(пСтрока, ";", "");
	пСтрока = СтрЗаменить(пСтрока, "/", "");
	пСтрока = СтрЗаменить(пСтрока, "\", "");
	пСтрока = СтрЗаменить(пСтрока, "-", "");
	пСтрока = СтрЗаменить(пСтрока, ".", "");
	пСтрока = СтрЗаменить(пСтрока, ",", "");
	пСтрока = СтрЗаменить(пСтрока, "*", "");
	пСтрока = СтрЗаменить(пСтрока, "#", "");
	пСтрока = СтрЗаменить(пСтрока, "'", "");
	пСтрока = СтрЗаменить(пСтрока, "+", "");
	пСтрока = СтрЗаменить(пСтрока, "=", "");
	пСтрока = СтрЗаменить(пСтрока, "_", "");
	пСтрока = СтрЗаменить(пСтрока, "&", "");
	пСтрока = СтрЗаменить(пСтрока, "^", "");
	пСтрока = СтрЗаменить(пСтрока, "<", "");
	пСтрока = СтрЗаменить(пСтрока, ">", "");
	пСтрока = СтрЗаменить(пСтрока, "{", "");
	пСтрока = СтрЗаменить(пСтрока, "}", "");
	пСтрока = СтрЗаменить(пСтрока, "}", "");
	пСтрока = СтрЗаменить(пСтрока, ":", "");
	пСтрока = СтрЗаменить(пСтрока, "[", "");
	пСтрока = СтрЗаменить(пСтрока, "]", "");
	пСтрока = СтрЗаменить(пСтрока, "@", "");
	пСтрока = СтрЗаменить(пСтрока, "~", "");
	Возврат пСтрока;

КонецФункции

&НаКлиенте
Процедура ОбновитьПредставлениеДатыПоВыбранномуФормату()

	Элементы.ДекорацияФорматДаты.Заголовок = Формат(Дата(1983, 04, 18, 13, 14, 15), "ДФ='"
		+ ВыгрузкаВФайлФорматРеквизитовТипаДата + "'");

КонецПроцедуры


//ОБРАБОТЧИКИ СОБЫТИЙ
&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	СохранитьТекстТекущегоЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровЗначениеПараметраПриИзменении(Элемент)
	ТекущийПараметр = СписокПараметров.НайтиПоИдентификатору(Элементы.СписокПараметров.ТекущаяСтрока);
	ТекущийПараметр.ТипПараметра = ТипЗнч(ТекущийПараметр.ЗначениеПараметра);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗапросовПослеУдаления(Элемент)
	Если СписокЗапросов.Количество() = 0 Тогда
		ВключитьЭлементыДляЗапросов(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытиеФормыПодтверждено = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элемент.ТекущиеДанные[Поле.Имя]);
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элементы.СписокПараметровЗначениеПараметра.ВыбиратьТип = ТипЗнч(
		Элементы.СписокПараметров.ТекущиеДанные.Значениепараметра) = Тип("Неопределено");
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	СписокПараметров.НайтиПоИдентификатору(Элементы.СписокПараметров.ТекущаяСтрока).ЗначениеПараметра = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	СоздатьНовыйЗапрос();
	ЗаполнитьНастройки();
	ОбновитьПредставлениеДатыПоВыбранномуФормату();
	Элементы.ГруппаЗапросыМетаданныеПараметры.ТекущаяСтраница = Элементы.ГруппаТекстЗапроса;

КонецПроцедуры

&НаКлиенте
Процедура ПакетныйЗапросПриИзменении(Элемент)
	Элементы.НомерЗапросаВПакете.Доступность = ПакетныйЗапрос;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Не ЗакрытиеФормыПодтверждено Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма), "Закрыть консоль запросов?",
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	ТекстЗапроса = ВыбранноеЗначение;
	СтрокаТЗ = ПолучитьСтрокуТЗЗапросы();
	СтрокаТЗ.ТекстЗапроса = ТекстЗапроса;
	ПолучитьПараметрыИзЗапросаНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла для сохранения'");
	ВыборФайла.Фильтр = "Текстовые документы (*.txt)|*.txt|Значения, разделённые запятыми (*.csv)|*.csv|Все файлы (*.*)|*.*";
	ВыборФайла.ПроверятьСуществованиеФайла = Истина;
	Если Не ПустаяСтрока(ВыгрузкаВФайлПутьКФайлу) Тогда
		ВыборФайла.ПолноеИмяФайла = ВыгрузкаВФайлПутьКФайлу;
	КонецЕсли;

	Если ВыборФайла.Выбрать() Тогда
		ВыгрузкаВФайлПутьКФайлу = ВыборФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриводитьКВерхнемуРегиструПриИзменении(Элемент)

	Если ВыгрузкаВФайлПриводитьКВерхнемуРегистру Тогда
		ВыгрузкаВФайлПриводитьКНижнемуРегистру = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриводитьСтроковыеРеквизитыНижнемуРегиструПриИзменении(Элемент)

	Если ВыгрузкаВФайлПриводитьКНижнемуРегистру Тогда
		ВыгрузкаВФайлПриводитьКВерхнемуРегистру = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НумероватьСтрокиПриИзменении(Элемент)
	Элементы.ВыгрузкаВФайлНачинатьНумерациюСНомера.Доступность = ВыгрузкаВФайлНумероватьСтроки;
	Элементы.ВыгрузкаВФайлВыводитьНомерПервойКолонкой.Доступность = ВыгрузкаВФайлНумероватьСтроки;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВФайлУдалятьСпецСимволыПриИзменении(Элемент)
	Элементы.ВыгрузкаВФайлНомерКолонкиДляУдаленияСпецсимволов.Доступность = ВыгрузкаВФайлУдалятьСпецСимволы;
КонецПроцедуры

&НаКлиенте
Процедура ФорматРеквизитовТипаДатаПриИзменении(Элемент)

	ОбновитьПредставлениеДатыПоВыбранномуФормату();

КонецПроцедуры

&НаКлиенте
Процедура СписокЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Элементы.ГруппаЗапросыМетаданныеПараметры.ТекущаяСтраница = Элементы.ГруппаТекстЗапроса;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСписокЗапросовСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если Элементы.ГруппаСписокЗапросовСтраницы.ТекущаяСтраница = Элементы.ГруппаЗапросДобавить Тогда

		СоздатьНовыйЗапрос();

	ИначеЕсли Элементы.ГруппаСписокЗапросовСтраницы.ТекущаяСтраница = Элементы.ГруппаЗапросУдалить Тогда

		Если Элементы.ГруппаСписокЗапросовСтраницы.ПодчиненныеЭлементы.Количество() > 3 Тогда

			УдалитьЗапрос(НомерТекущегоЗапроса);

		Иначе

			Элементы.ГруппаСписокЗапросовСтраницы.ТекущаяСтраница = Элементы["ГруппаЗапрос"
				+ СписокЗапросов[0].НомерЗапроса];

		КонецЕсли;

	Иначе

		ОтобразитьЭлементыФормыНаУказаннойВкладке(Элементы.ГруппаСписокЗапросовСтраницы.ТекущаяСтраница.Имя);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИмяТекущегоЗапросаПриИзменении(Элемент)

	СтрокаТЗ = СписокЗапросов.НайтиСтроки(Новый Структура("НомерЗапроса", Число(Сред(
		Элементы.ГруппаСписокЗапросовСтраницы.ТекущаяСтраница.Имя, 13))))[0];
	СтрокаТЗ.ИмяЗапроса = ИмяТекущегоЗапроса;

КонецПроцедуры

ЗакрытиеФормыПодтверждено = Ложь;