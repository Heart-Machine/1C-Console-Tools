
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ПолучитьСписокРегионов();
	УстановитьУсловноеОформление();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКлассификаторБанков(Команда)
	ОткрытьФорму("Справочник.КлассификаторБанков.ФормаСписка",,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБанки(Команда)
	ОткрытьФорму("Справочник.Банки.ФормаСписка",,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКурсовВалют(Команда)
	ОткрытьФорму("Обработка.ЗагрузкаКурсовВалют.Форма",,ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВалюты(Команда)
	ОткрытьФорму("Справочник.Валюты.ФормаСписка",,ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьИдентификаторыОбъектовМетаданныхНаСервере(ЕстьИзменения, ЕстьУдаленные)
	
	Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника(ЕстьИзменения, ЕстьУдаленные);
			
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИдентификаторыОбъектовМетаданных(Команда)
	
	ЕстьИзменения = Ложь;
	ЕстьУдаленные = Ложь;

	ОбновитьИдентификаторыОбъектовМетаданныхНаСервере(ЕстьИзменения, ЕстьУдаленные);
	
	Если Не ЕстьИзменения И Не ЕстьУдаленные Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Обновление идентификаторов метаданных не требуется.'"));
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Обновление было произведено.'"));
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИдентификаторыОбъектовРасширений(Команда)
	ОткрытьФорму("Справочник.ИдентификаторыОбъектовРасширений.ФормаСписка",,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИдентификаторыОбъектовМетаданных(Команда)
	ОткрытьФорму("Справочник.ИдентификаторыОбъектовМетаданных.ФормаСписка",,ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПутьФайлаФИАСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПутьФайлаФИАСНачалоВыбораЗавершение", ЭтаФорма);
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьФайлаФИАСНачалоВыбораЗавершение(Результат, ПараметрыКоманды) Экспорт 
	Если Результат <> Неопределено Тогда
		ПутьФайлаФИАС = Результат[0];	
	КонецЕсли;
КонецПроцедуры // ПутьФайлаФИАСНачалоВыбораЗавершение()

&НаКлиенте
Процедура СкачатьФИАС(Команда)
	
	ОчиститьСообщения();
	
	Если ПустаяСтрока(ПутьФайлаФИАС) Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.УстановитьДанные("ПутьФайлаФИАС");
		//Сообщение.ПутьКДанным = "ПутьФайлаФИАС";
		Сообщение.Поле = "ПутьФайлаФИАС";
		Сообщение.Текст = "Заполните путь к файлу ФИАС!";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если ПустаяСтрока(ТипФИАС) Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.УстановитьДанные("ТипФИАС");
		//Сообщение.ПутьКДанным = "ПутьФайлаФИАС";
		Сообщение.Поле = "ТипФИАС";
		Сообщение.Текст = "Заполните тип классификатора ФИАС!";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если ПустаяСтрока(ТипФИАС) Или ПустаяСтрока(ПутьФайлаФИАС) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Загружать", Истина);
	МассивСубъектовРФ = СубъектыРФ.НайтиСтроки(ПараметрыОтбора);
	Если МассивСубъектовРФ.Количество() = 0 Тогда
		Оповещение = Новый ОписаниеОповещения;
		ПоказатьПредупреждение(Оповещение, "Нужно указать регионы для скачивания!",,"Оповещение");
		Возврат;	
	КонецЕсли;
	
	Если ТипФИАС = "С поддержкой" Тогда 
		URL = "https://its.1c.ru/download/fias/download2?id=";
	ИначеЕсли ТипФИАС = "Без поддержки" Тогда
		URL = "https://its.1c.ru/download/fias/download?id=";
	Иначе 
		Возврат;
	КонецЕсли;
		
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("URL", URL);
	ПараметрыОповещения.Вставить("ПутьФайлаФИАС", ПутьФайлаФИАС);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьФайлССервераЗавершение", ЭтаФорма, ПараметрыОповещения);
	ПоказатьВопрос(Оповещение, "Скачать файл с сайта? Это займет некоторое время.", РежимДиалогаВопрос.ДаНет,,,"Оповещение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлССервераЗавершение(Результат, ПараметрыОповещения) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Счетчик = 0;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Загружать", Истина);
		МассивСубъектовРФ = СубъектыРФ.НайтиСтроки(ПараметрыОтбора);
		Для каждого Строка Из МассивСубъектовРФ Цикл
			Состояние("Скачивание ФИАС", Счетчик / МассивСубъектовРФ.Количество() * 100, "Скачивание " + Строка.Представление + " (" + (Счетчик + 1) + " из " + МассивСубъектовРФ.Количество() + ")", БиблиотекаКартинок.Загрузить);
			
			URL = ПараметрыОповещения.URL + Строка.КодСубъектаРФ;			
			НастройкиПолучения = Новый Структура;
			НастройкиПолучения.Вставить("ПутьДляСохранения", ПараметрыОповещения.ПутьФайлаФИАС + "\" + Формат(Строка.КодСубъектаРФ,"ЧЦ=2; ЧВН=") + ".ZIP");
			НастройкиПолучения.Вставить("ЗащищенноеСоединение", Истина);
			
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Accept-Charset", "utf-8");
			НастройкиПолучения.Вставить("Заголовки", Заголовки);
			
			Ответ = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(URL, НастройкиПолучения); 
			Если Ответ.Статус Тогда
				Файл = Новый Файл(Ответ.Путь);
				Если Файл.Существует() Тогда
					Счетчик = Счетчик + 1;
				КонецЕсли;
			Иначе
				Если Ответ.Свойство("Строка") Тогда
					Сообщить(Ответ.Строка);
				ИначеЕсли Ответ.Свойство("СообщениеОбОшибке") Тогда
					Сообщить(Ответ.СообщениеОбОшибке);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПоказатьПредупреждение(, "Адресный классификатор успешно скачен!",, "Оповещение");
		Состояние("Скачивание ФИАС", 100, "Успешно выполнено!", БиблиотекаКартинок.Загрузить);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазделитьURL(Знач URL) Экспорт
	
	СтруктураURL = СтруктураURI(URL);
	
	Результат = Новый Структура;
	Результат.Вставить("Протокол", ?(ПустаяСтрока(СтруктураURL.Схема), "http", СтруктураURL.Схема));
	Результат.Вставить("ИмяСервера", СтруктураURL.ИмяСервера);
	Результат.Вставить("ПутьКФайлуНаСервере", СтруктураURL.ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ПолучитьСписокРегионов()

	// Получаем уже загруженные регионы.
	ТаблицаРегионов = АдресныйКлассификаторСлужебный.СведенияОЗагрузкеСубъектовРФ();
	ТаблицаРегионов.Колонки.Добавить("Загружать", Новый ОписаниеТипов("Булево"));
	ТаблицаРегионов.Колонки.Добавить("РежимРаботы", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Регион Из ТаблицаРегионов Цикл
		Регион.Представление = " " + Формат(Регион.КодСубъектаРФ, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=") + ", " + Регион.Представление;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаРегионов, "СубъектыРФ");
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьСубъектыРФ(Команда)

	Для каждого Строка Из СубъектыРФ Цикл
	   	Строка.Загружать = Ложь;	
	КонецЦикла;	
	ПроверкаДоступностиЗугрузкиРегионов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСубъектыРФ(Команда)

	Для каждого Строка Из СубъектыРФ Цикл
	   	Строка.Загружать = Истина;	
	КонецЦикла;	
	ПроверкаДоступностиЗугрузкиРегионов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСубъектыРФРасширенный(Команда)
	СписокНенужныхРегионов = Новый СписокЗначений;
	СписокНенужныхРегионов.Добавить(80);
	СписокНенужныхРегионов.Добавить(81);
	СписокНенужныхРегионов.Добавить(82);
	СписокНенужныхРегионов.Добавить(84);
	СписокНенужныхРегионов.Добавить(85);
	СписокНенужныхРегионов.Добавить(88);
	
	Для каждого Строка Из СубъектыРФ Цикл
		Если СписокНенужныхРегионов.НайтиПоЗначению(Строка.КодСубъектаРФ) = Неопределено Тогда 
	   		Строка.Загружать = Истина;	
		КонецЕсли;
	КонецЦикла;	
	ПроверкаДоступностиЗугрузкиРегионов();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРегионы(Команда)
	
	ВыполнитьЗагрузкуРегионов();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуРегионов(ПоЧастям = Ложь, ПерваяЗагрузка = Истина)

	ОчиститьСообщения();
	
	Если ПустаяСтрока(ПутьФайлаФИАС) Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.УстановитьДанные("ПутьФайлаФИАС");
		//Сообщение.ПутьКДанным = "ПутьФайлаФИАС";
		Сообщение.Поле = "ПутьФайлаФИАС";
		Сообщение.Текст = "Заполните путь к файлу ФИАС!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ЗагружатьИсториюИзмененийАдресныхОбъектов = Ложь;
	
	ЗагрузкаРегионовПоЧастям = ПоЧастям;
	Если ЗагрузкаРегионовПоЧастям Тогда
	    Если ПерваяЗагрузка Тогда
		    КопированиеСубъектовРФ();
			ВыбранныеРегионы = СубъектыРФПолный.НайтиСтроки(Новый Структура("Загружать", Истина));
			СчРегион = ВыбранныеРегионы.Количество() - 1;
			Пока СчРегион >= 10 Цикл
				СубъектыРФ.НайтиПоИдентификатору(ВыбранныеРегионы[СчРегион].ПолучитьИдентификатор()).Загружать = Ложь;
				СчРегион = СчРегион - 1;			
			КонецЦикла;
		Иначе	
			ВыбранныеРегионы = СубъектыРФПолный.НайтиСтроки(Новый Структура("Загружать", Истина));
			ВыбранныеРегионыРФ = СубъектыРФ.НайтиСтроки(Новый Структура("Загружать", Истина));
			ПоследнийРегион = ВыбранныеРегионыРФ[ВыбранныеРегионыРФ.ВГраница()];
			Для каждого Регион Из ВыбранныеРегионыРФ Цикл
			    Регион.Загружать = Ложь;			
			КонецЦикла;
			УстановитьЗагрузку = Ложь;
			СчРегион = 0;
			Для СчВыбранный = 0 По ВыбранныеРегионы.ВГраница() Цикл
				Регион = ВыбранныеРегионы[СчВыбранный];
				Если Регион.ПолучитьИдентификатор() = ПоследнийРегион.ПолучитьИдентификатор() Тогда
					УстановитьЗагрузку = Истина;
					Если СчВыбранный = ВыбранныеРегионы.ВГраница() Тогда
						ЗавершениеЗагрузки();
						Возврат;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				Если УстановитьЗагрузку Тогда
					СубъектыРФ.НайтиПоИдентификатору(Регион.ПолучитьИдентификатор()).Загружать = Истина;
					СчРегион = СчРегион + 1;
					Если СчРегион = 10 Тогда					
						Прервать;					
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	КодИсточникаЗагрузки = "КАТАЛОГ";
	
	Текст = НСтр("ru = 'Для загрузки адресного классификатора из папки
				|необходимо установить расширение для работы с 1С:Предприятием.'");
	КонтрольРасширенияРаботыСФайлами(Текст, КодИсточникаЗагрузки, ПутьФайлаФИАС);

КонецПроцедуры // ВыполнитьЗагрузкуРегионов()

&НаСервере
Процедура КопированиеСубъектовРФ(ВернутьЗначения = Ложь)
	Если ВернутьЗначения Тогда
		СубъектыРФ.Загрузить(СубъектыРФПолный.Выгрузить());
	Иначе
		СубъектыРФПолный.Загрузить(СубъектыРФ.Выгрузить());
	КонецЕсли;
КонецПроцедуры // КопированиеСубъектовРФ()

&НаКлиенте
Процедура КонтрольРасширенияРаботыСФайлами(Знач ТекстПредложения, Знач КодИсточника, Знач АдресИсточника)
	
	Оповещение = Новый ОписаниеОповещения("КонтрольРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("КодИсточникаЗагрузки", КодИсточника);
	Оповещение.ДополнительныеПараметры.Вставить("АдресЗагрузки",        АдресИсточника);
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	
КонецПроцедуры

// Завершение диалога предложения расширения для работы с файлами.
//
&НаКлиенте
Процедура КонтрольРасширенияРаботыСФайламиЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКлассификаторИзКаталога(ДополнительныеПараметры.АдресЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторИзКаталога(Знач КаталогДанных)
	
	КодыРегионов = КодыРегионовДляЗагрузки();
	
	// Проверка доступности и наличия файлов.
	ПараметрыЗагрузки = Новый Структура("КодИсточникаЗагрузки, ПолеОшибки", КодИсточникаЗагрузки, "АдресЗагрузки");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьКлассификаторИзКаталогаЗавершение", ЭтотОбъект);
	АдресныйКлассификаторКлиент.АнализДоступностиФайловКлассификатораВКаталоге(ОписаниеОповещения, КодыРегионов, КаталогДанных, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторИзКаталогаЗавершение(РезультатАнализа, ДополнительныеПараметры) Экспорт
	
	Если РезультатАнализа.Ошибки <> Неопределено Тогда
		// Не хватает файлов для загрузки по указанным режимам.
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(РезультатАнализа.Ошибки);
		Возврат;
	КонецЕсли;
	
	// Загружаем в фоне
	УдалитьПослеПередачиНаСервер = Новый Массив;
	РезультатАнализа.Вставить("УдалитьПослеПередачиНаСервер", УдалитьПослеПередачиНаСервер);
	
	ЗапуститьФоновуюЗагрузкуИзКаталогаКлиента(РезультатАнализа);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуИзКаталогаКлиента(Знач ПараметрыЗагрузки)
	
	Если ПараметрыЗагрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекстСостоянияЗагрузки = НСтр("ru = 'Передача файлов на сервер приложения...'");
	
	// Переключаем режим - страницу.
	Элементы.СтраницыЗагрузкиФИАС.ТекущаяСтраница = Элементы.ГруппаВоВремяЗагрузки;
	ОбновитьИнтерфейсПоКоличествуЗагружаемых();
		
	// Список передаваемых на сервер файлов.
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого КлючЗначение Из ПараметрыЗагрузки.ФайлыПоРегионам Цикл
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
			Для Каждого ИмяФайла Из КлючЗначение.Значение Цикл
				ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла));
			КонецЦикла;
		Иначе
			ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(КлючЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
	ДополнительныеПараметры.Вставить("Позиция", 0);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПослеПомещенияФайлов",
		ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы,, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПослеПомещенияФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Позиция = ДополнительныеПараметры.Позиция;
	Если Позиция <= ПомещенныеФайлы.ВГраница() Тогда
		
		// Сохраняем время изменения - версию.
		Описание = ПомещенныеФайлы[Позиция];
		ДанныеФайла = Новый Структура("Имя, Хранение");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Описание);
		ДополнительныеПараметры.Вставить("ДанныеФайла", ДанныеФайла);
		ДополнительныеПараметры.Вставить("ПомещенныеФайлы", ПомещенныеФайлы);
		Файл = Новый Файл(Описание.ПолноеИмя);
		Файл.НачатьПолучениеУниверсальногоВремениИзменения(Новый ОписаниеОповещения("ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПослеПолученияВремениИзменения",
			ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе // выход из цикла
		
		Режим = Неопределено;
		ДополнительныеПараметры.ПараметрыЗагрузки.Свойство("Режим", Режим);
		
		ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
		Задание = ЗапуститьФоновуюЗагрузкуНаСервере(ДополнительныеПараметры.ПараметрыЗагрузки.КодыРегионов, ПомещенныеФайлы, Режим, ЗагружатьИсториюИзмененийАдресныхОбъектов, УникальныйИдентификатор);
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		НастройкиОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
	
		Обработчик = Новый ОписаниеОповещения("ПослеФоновойЗагрузкиИзКаталога", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПослеПолученияВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ДанныеФайла.Вставить("ВремяИзменения", ВремяИзменения);
	ДополнительныеПараметры.ПомещенныеФайлы[ДополнительныеПараметры.Позиция] = ДополнительныеПараметры.ДанныеФайла;
	ДополнительныеПараметры.Позиция = ДополнительныеПараметры.Позиция + 1;
	ЗапуститьФоновуюЗагрузкуИзКаталогаКлиентаПослеПомещенияФайлов(ДополнительныеПараметры.ПомещенныеФайлы, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФоновойЗагрузкиИзКаталога(Задание, ДополнительныеПараметры) Экспорт

	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыЗагрузкиФИАС.ТекущаяСтраница = Элементы.ГруппаЗагрузкаФИАС;
	Если Задание.Статус = "Ошибка" Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удается загрузить адресные сведения из файлов.'");
		ТекстОшибки = ТекстОшибки + НСтр("ru = 'Необходимо сохранить файлы с сайта «1С» http://its.1c.ru/download/fias2 на диск, а затем загрузить в программу.'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + НСтр("ru = 'Техническая информация:'") + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		ВывестиСообщениеОбОшибке(ТекстОшибки);
		
		Возврат;
	ИначеЕсли Задание.Статус = "Выполнено" Тогда
		
		Если ЗагрузкаРегионовПоЧастям Тогда
			ВыполнитьЗагрузкуРегионов(Истина, Ложь);
		Иначе
			ЗавершениеЗагрузки();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОбОшибке(Знач ТекстОшибки)
	ОчиститьСообщения();
	ПоказатьПредупреждение(, ТекстОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПоКоличествуЗагружаемых()
	
	// Страница выбора
	ВыбраноРегионовДляЗагрузки = СубъектыРФ.НайтиСтроки( Новый Структура("Загружать", Истина) ).Количество();
	
	// Страница загрузки
	ТекстОписанияЗагрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загружаются данные по выбранным регионам (%1)'"), ВыбраноРегионовДляЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗагрузки()
	
	// Для сброса признака АдресныйКлассификаторУстарел в параметрах работы клиента.
	ОбновитьПовторноИспользуемыеЗначения();
	Оповестить("ЗагруженАдресныйКлассификатор", Истина, ЭтотОбъект);
	
	ТекстОписанияЗагрузки = НСтр("ru = 'Адресный классификатор успешно загружен.'");
	ПоказатьПредупреждение(,ТекстОписанияЗагрузки,,"Оповещение"); 
	ПолучитьДанныеОЗагруженномКлассификаторе();
	КопированиеСубъектовРФ(Истина);
	Для каждого Регион Из СубъектыРФ.НайтиСтроки(Новый Структура("Загружать", Истина)) Цикл
	    Регион.Загружено = Истина;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполняется" Тогда
		Прогресс = ПрочитатьПрогресс(Результат.ИдентификаторЗадания);
		Если Прогресс <> Неопределено Тогда
			ТекстСостоянияЗагрузки = Прогресс.Текст;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьПрогресс(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
КонецФункции

&НаСервереБезКонтекста
Функция ЗапуститьФоновуюЗагрузкуНаСервере(Знач КодыРегионов, Знач ОписаниеФайловЗагрузки, Знач Режим, Знач ЗагружатьИсториюИзмененийАдресныхОбъектов, Знач УникальныйИдентификатор)
	
	Коды = Новый Массив;
	Для каждого КодРегиона Из КодыРегионов Цикл
		Коды.Добавить(КодРегиона.Значение);
	КонецЦикла;
	
	ПараметрыЗагрузки = АдресныйКлассификаторСлужебный.ПараметрыЗагрузкиКлассификатораАдресов();
	ПараметрыЗагрузки.ЗагружатьИсториюАдресов = ЗагружатьИсториюИзмененийАдресныхОбъектов;
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Коды);
	
	// Файлы преобразуем в двоичные данные - хранилище не может быть разделено с сеансом фонового задания.
	ОписаниеФайлов = Новый Массив;
	Для Каждого Описание Из ОписаниеФайловЗагрузки Цикл
		ДанныеФайла = Новый Структура("Имя, ВремяИзменения");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Описание);
		ДанныеФайла.Вставить("Хранение", ПолучитьИзВременногоХранилища(Описание.Хранение));
		ОписаниеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	ПараметрыМетода.Добавить(ОписаниеФайлов);
	ПараметрыМетода.Добавить(ПараметрыЗагрузки);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка адресного классификатора'");
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("АдресныйКлассификаторСлужебный.ФоновоеЗаданиеЗагрузкиКлассификатораАдресов",
		ПараметрыМетода, ПараметрыВыполнения);
		
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Функция КодыРегионовДляЗагрузки()
	Результат = Новый СписокЗначений;
	
	Для Каждого Регион Из СубъектыРФ.НайтиСтроки(Новый Структура("Загружать", Истина)) Цикл
		Результат.Добавить(Регион.КодСубъектаРФ, Регион.Представление);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ТипФИАСПриИзменении(Элемент)
	
	ПолучитьАктуальнуюДатуФИАС();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьАктуальнуюДатуФИАС()
	
	Если ТипФИАС = "С поддержкой" Тогда 
		АдресФайла = "http://downloads.1c.ru/ipp/ITSREPV/V8Update/fias2/version.zip";
	ИначеЕсли ТипФИАС = "Без поддержки" Тогда
		АдресФайла = "http://downloads.1c.ru/ipp/ITSREPV/V8Update/fias/version.zip";
	Иначе 
		Возврат;
	КонецЕсли;

	URLРазделенный = РазделитьURL(АдресФайла);
	
	ИмяСервера = URLРазделенный.ИмяСервера;
	ПутьКФайлуНаСервере = URLРазделенный.ПутьКФайлуНаСервере;
	
	Соединение = Новый HTTPСоединение(ИмяСервера, , , , , , );
	
	HTTPЗапрос = Новый HTTPЗапрос(ПутьКФайлуНаСервере);
	Заголовки = Соединение.ПолучитьЗаголовки(HTTPЗапрос).Заголовки;
	ПоследнееИзменение = Заголовки.Получить("Last-Modified");
	
	Если ПоследнееИзменение = Неопределено Тогда
		ДатаАктуальнойВерсииФИАС = "Нет доступа к дате";
	Иначе
		ДатаАктуальнойВерсииФИАС = ПоследнееИзменение;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Возврат;
	КонецЕсли;
	
	МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
	РезультатПолученияФайла = МодульПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(АдресФайла);
	Если Не РезультатПолученияФайла.Статус Тогда
		Возврат;
	КонецЕсли;
	
	// Получен zip, внутри которого xml.
	КаталогДляРаспаковки = ПолучитьИмяВременногоФайла();
	Архив = Новый ЧтениеZipФайла(РезультатПолученияФайла.Путь);
	Архив.ИзвлечьВсе(КаталогДляРаспаковки);
	ФайлОписания = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогДляРаспаковки) + "version.xml";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлОписания);
	ДоступныеДанные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/AddressSystem", "Publications"));
	
	ЧтениеXML.Закрыть();
	ФайловаяСистема.УдалитьВременныйФайл(КаталогДляРаспаковки);
	ФайловаяСистема.УдалитьВременныйФайл(РезультатПолученияФайла.Путь);
	
	ДатаПоследнейВерсии = '00000000';
	Для Каждого Публикация Из ДоступныеДанные.ПолучитьСписок("Publication") Цикл
		Если Публикация.UpdateDate > ДатаПоследнейВерсии Тогда
			ДатаПоследнейВерсии = Публикация.UpdateDate - 86400;
		КонецЕсли;
	КонецЦикла;
	
	Если ДатаПоследнейВерсии = '00000000' Тогда
		ДатаАктуальнойВерсииФИАС = "Нет доступа к дате";
	Иначе
		ДатаАктуальнойВерсииФИАС = Формат(Публикация.UpdateDate, "ДЛФ=DDT");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФИАСНаСайте(Команда)
	
	Если ТипФИАС = "С поддержкой" Тогда 
		ЗапуститьПриложение("https://its.1c.ru/download/fias2");
	ИначеЕсли ТипФИАС = "Без поддержки" Тогда
		ЗапуститьПриложение("https://its.1c.ru/download/fias");
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("СубъектыРФПредставление");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СубъектыРФ.Загружено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьЗагрузку(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СубъектыРФПриИзменении(Элемент)
	ПроверкаДоступностиЗугрузкиРегионов();
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДоступностиЗугрузкиРегионов()
	ВыбраноРегионовДляЗагрузки = СубъектыРФ.НайтиСтроки( Новый Структура("Загружать", Истина) ).Количество();
	Если ВыбраноРегионовДляЗагрузки = 0 Тогда
		Элементы.ЗагрузитьРегионы.Доступность = Ложь;
		Элементы.СубъектыРФЗагрузитьРегионыПоЧастям.Доступность = Ложь;
	Иначе
		Элементы.ЗагрузитьРегионы.Доступность = Истина;
		Элементы.СубъектыРФЗагрузитьРегионыПоЧастям.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеОЗагруженномКлассификаторе()
	ЗагруженныеАдресныеСведения = АдресныйКлассификаторПовтИсп.СведенияОЗагрузкеСубъектовРФ();
	ДатаЗагрузкиКлассификатора = ЗагруженныеАдресныеСведения.Получить(1).ДатаЗагрузки;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаКлассификаторАдресов Тогда
		ПолучитьАктуальнуюДатуФИАС();
		ПроверкаДоступностиЗугрузкиРегионов();
		ПолучитьДанныеОЗагруженномКлассификаторе();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРегионыПоЧастям(Команда)
	ВыполнитьЗагрузкуРегионов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПутьФайлаФИАСОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(ПутьФайлаФИАС) Тогда
		Возврат;
	Иначе	
		ЗапуститьПриложение(ПутьФайлаФИАС);
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура УдалитьСтарыеИдентификаторыОбъектовМетаданныхНаСервере(КоличествоВыборки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка,
		|	ИдентификаторыОбъектовМетаданных.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.ПометкаУдаления = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выгрузить();
	КоличествоВыборки = Выборка.Количество();
	Для каждого Строка Из Выборка Цикл
		Если СтрНачинаетсяС(СокрЛП(Строка.Наименование), "?") Тогда 
			Справочник = Строка.Ссылка.ПолучитьОбъект();
			Справочник.Удалить();
		КонецЕсли;	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентификаторыОбъектовРасширений.Ссылка КАК Ссылка,
		|	ИдентификаторыОбъектовРасширений.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовРасширений КАК ИдентификаторыОбъектовРасширений
		|ГДЕ
		|	ИдентификаторыОбъектовРасширений.ПометкаУдаления = ИСТИНА";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выгрузить();
	КоличествоВыборки = КоличествоВыборки + Выборка.Количество();
	Для каждого Строка Из Выборка Цикл
		Если СтрНачинаетсяС(СокрЛП(Строка.Наименование), "?") Тогда 
			Справочник = Строка.Ссылка.ПолучитьОбъект();
			Справочник.Удалить();
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтарыеИдентификаторыОбъектовМетаданных(Команда)
	КоличествоВыборки = 0;
	УдалитьСтарыеИдентификаторыОбъектовМетаданныхНаСервере(КоличествоВыборки);
	Если КоличествоВыборки = 0 Тогда
	    ПоказатьПредупреждение(,"Старый идентификаторов не обнаружено");
	Иначе	
	    ПоказатьПредупреждение(,"Былы удалены старые записи: " + КоличествоВыборки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуЗагрузкиФИАСНаСервере()
	НаборРегистра = РегистрыСведений.ЗагруженныеВерсииАдресныхСведений.СоздатьНаборЗаписей();
	НаборРегистра.Прочитать();
	
	Для каждого СтрокаЗаписи Из НаборРегистра Цикл
	    СтрокаЗаписи.ДатаЗагрузки = НоваяДатаЗагрузкиФИАС;
	КонецЦикла;
	НаборРегистра.Записать();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуЗагрузкиФИАСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Или Результат = Дата(1,1,1) Тогда
		Возврат;
	КонецЕсли;
	НоваяДатаЗагрузкиФИАС = Результат;
	УстановитьДатуЗагрузкиФИАСНаСервере();
	ОбновитьАктуальностьФИАСНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуЗагрузкиФИАС(Команда)
	Оповещение = Новый ОписаниеОповещения("УстановитьДатуЗагрузкиФИАСЗавершение", ЭтотОбъект);
	ПоказатьВводДаты(Оповещение, НоваяДатаЗагрузкиФИАС);	
КонецПроцедуры

&НаКлиенте
Процедура ПерезапускСеанса(Команда)
	ЗавершитьРаботуСистемы(Истина, Истина);
КонецПроцедуры

&НаСервере
Процедура ОбновитьАктуальностьФИАСНаСервере()
	ОбновитьПовторноИспользуемыеЗначения();
	ПолучитьДанныеОЗагруженномКлассификаторе();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАктуальностьФИАС(Команда)
	ОбновитьАктуальностьФИАСНаСервере();
КонецПроцедуры
