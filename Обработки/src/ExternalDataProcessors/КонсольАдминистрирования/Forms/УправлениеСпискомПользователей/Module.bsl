&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ЗаполнитьТаблицуПользователей();
	ЗаполнитьСписокДоменов();

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	НовоеОформление = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	// Основная группа отбора
	ГруппаЭлементаОсновная = НовоеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементаОсновная.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлементаНедействителен = ГруппаЭлементаОсновная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаНедействителен.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблПользователей.Недействителен");
	ОтборЭлементаНедействителен.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаНедействителен.ПравоеЗначение = Истина;
	
	// Отбор, когда нет ни одного способа аутентификации
	ГруппаЭлементаИ = ГруппаЭлементаОсновная.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлементаАутентификацияОС = ГруппаЭлементаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаАутентификацияОС.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблПользователей.АутентификацияОС");
	ОтборЭлементаАутентификацияОС.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаАутентификацияОС.ПравоеЗначение = Ложь;

	ОтборЭлементаАутентификацияСтандартная = ГруппаЭлементаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаАутентификацияСтандартная.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблПользователей.АутентификацияСтандартная");
	ОтборЭлементаАутентификацияСтандартная.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаАутентификацияСтандартная.ПравоеЗначение = Ложь;
	
	// Отбор, когда стандартной аутентификации нет и включена уатентификация ОС, но не заполнен домен
	ГруппаЭлементаИ = ГруппаЭлементаОсновная.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлементаАутентификацияОС = ГруппаЭлементаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаАутентификацияОС.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблПользователей.АутентификацияОС");
	ОтборЭлементаАутентификацияОС.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаАутентификацияОС.ПравоеЗначение = Истина;

	ОтборЭлементаАутентификацияСтандартная = ГруппаЭлементаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаАутентификацияСтандартная.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблПользователей.АутентификацияСтандартная");
	ОтборЭлементаАутентификацияСтандартная.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлементаАутентификацияСтандартная.ПравоеЗначение = Ложь;

	ОтборЭлементаПользовательОС = ГруппаЭлементаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлементаПользовательОС.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблПользователей.ПользовательОС");
	ОтборЭлементаПользовательОС.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	НовоеОформление.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	ОформляемыеПоля = НовоеОформление.Поля.Элементы.Добавить();
	ОформляемыеПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблПользователейПользователь");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПользователей()

	ТаблПользователей.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|	Пользователи.Недействителен КАК Недействителен,
	|	Пользователи.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Служебный = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(Выборка.ИдентификаторПользователяИБ);
		Если СвойстваПользователяИБ <> Неопределено Тогда
			НоваяСтрока = ТаблПользователей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваПользователяИБ);
			НоваяСтрока.ПредупреждатьОбОпасныхДействиях = СвойстваПользователяИБ.ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТаблПользователейПоказыватьВСпискеВыбораПриИзменении(Элемент)
	ТекСтрока = Элементы.ТаблПользователей.ТекущиеДанные;
	ТекСтрока.ДанныеИзменены = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблПользователейАутентификацияОСПриИзменении(Элемент)
	ТекСтрока = Элементы.ТаблПользователей.ТекущиеДанные;
	ТекСтрока.ДанныеИзменены = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблПользователейАутентификацияСтандартнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.ТаблПользователей.ТекущиеДанные;
	ТекСтрока.ДанныеИзменены = Истина;
	ТекСтрока.ПоказыватьВСпискеВыбора = ТекСтрока.АутентификацияСтандартная;
КонецПроцедуры

&НаКлиенте
Процедура ТаблПользователейПользовательОСПриИзменении(Элемент)
	ТекСтрока = Элементы.ТаблПользователей.ТекущиеДанные;
	ТекСтрока.ДанныеИзменены = Истина;
	Если ТекСтрока.ПользовательОС = "" Тогда
		ТекСтрока.АутентификацияОС = Ложь;
	Иначе
		ТекСтрока.АутентификацияОС = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблПользователейНедействителенПриИзменении(Элемент)
	ТекСтрока = Элементы.ТаблПользователей.ТекущиеДанные;
	ТекСтрока.ДанныеИзменены = Истина;
	Если ТекСтрока.Недействителен Тогда
		ТекСтрока.АутентификацияОС = Ложь;
		ТекСтрока.АутентификацияСтандартная = Ложь;
		ТекСтрока.ПоказыватьВСпискеВыбора = Ложь;
	Иначе
		СвойстваПользователяИБ = ПолучитьСвойстваПользователяСправочника(ТекСтрока.Пользователь);
		ЗаполнитьЗначенияСвойств(ТекСтрока, СвойстваПользователяИБ);
		ТекСтрока.ПоказыватьВСпискеВыбора = ТекСтрока.АутентификацияСтандартная;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСвойстваПользователяСправочника(Пользователь)

	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(Пользователь) = Тип(
		"СправочникОбъект.Пользователи") Тогда
		Возврат Пользователь.СвойстваПользователяИБ.Получить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаписатьИзмененияНаСервере()

	Для Каждого Строка Из ТаблПользователей Цикл
		Если Строка.ДанныеИзменены Тогда
			НовоеОписаниеПользователяИБ = Пользователи.СвойстваПользователяИБ(
				Строка.Пользователь.ИдентификаторПользователяИБ);
			ЗаполнитьЗначенияСвойств(НовоеОписаниеПользователяИБ, Строка);
			Пользователи.УстановитьСвойстваПользователяИБ(Строка.Пользователь.ИдентификаторПользователяИБ,
				НовоеОписаниеПользователяИБ);
			Если НовоеОписаниеПользователяИБ.ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях
				<> Строка.ПредупреждатьОбОпасныхДействиях Тогда
				НовоеОписаниеПользователяИБ.ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Строка.ПредупреждатьОбОпасныхДействиях;
				НовоеОписаниеПользователяИБ.ПользовательИБ.Записать();
			КонецЕсли;

			Пользователь = Строка.Пользователь.ПолучитьОбъект();
			Пользователь.Недействителен = Строка.Недействителен;
			Пользователь.Записать();

		КонецЕсли;
	КонецЦикла;

	ЗаполнитьТаблицуПользователей();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменения(Команда)
	ЗаписатьИзмененияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПользователейПоДомену(Команда)
	Описание = Новый ОписаниеОповещения("ВыбратьДомен", ЭтаФорма);
	СписокДоменов.ПоказатьВыборЭлемента(Описание, "Выберите домен для пользователей");
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДомен(ВыбЗнач, Параметры) Экспорт

	Если ВыбЗнач <> Неопределено Тогда
		Домен = ВыбЗнач.Значение;
		ЗаполнитьСписокПользователейДомена(Домен);

		Если ВременнаяТаблПользователи.Количество() > 0 Тогда
			ИзмВременнаяТаблПользователи = Новый СписокЗначений;
			ИзмВременнаяТаблПользователи = ВременнаяТаблПользователи.Скопировать();
			Для Каждого Стр Из ИзмВременнаяТаблПользователи Цикл
				Стр.Значение = ПреобразоватьИмяПользователя(Стр.Значение);
			КонецЦикла;
			Для Каждого Строка Из ТаблПользователей Цикл
				Если НРег(Строка(Строка.Пользователь)) <> "администратор" И (Строка.АутентификацияОС
					Или Строка.АутентификацияСтандартная) Тогда
					НашЮзер = ПреобразоватьИмяПользователя(Строка(Строка.Пользователь));
					Найденный = ИзмВременнаяТаблПользователи.НайтиПоЗначению(НашЮзер);
					Если Найденный <> Неопределено Тогда
						НайденныйЮзер = ВременнаяТаблПользователи.НайтиПоИдентификатору(
							Найденный.ПолучитьИдентификатор());
						УстановитьПользователяОС(Строка, НайденныйЮзер.Значение, Домен);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокДоменов()
#Если Не ВебКлиент Тогда
	ПользователиОС = ПользователиОС();
	Для Каждого Строка Из ПользователиОС Цикл
		СписокДоменов.Добавить(Строка.ИмяДомена);
	КонецЦикла;
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПользователейДомена(Домен)

#Если Не ВебКлиент Тогда
	ПользователиОС = Новый ФиксированныйМассив(ПользователиОС());
	ПользователиДомена = Новый Массив;
	Для Каждого Строка Из ПользователиОС Цикл
		Если Строка.ИмяДомена = Домен Тогда
			ПользователиДомена = Строка.Пользователи;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ПользователиДомена.Количество() > 0 Тогда
		ВременнаяТаблПользователи.ЗагрузитьЗначения(ПользователиДомена);
	КонецЕсли;
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Функция СкомпоноватьРезультат(ИмяДомена, ИмяПользователя)

	Возврат "\\" + Строка(ИмяДомена) + "\" + Строка(ИмяПользователя);

КонецФункции

&НаСервере
Функция ПреобразоватьИмяПользователя(Знач ИмяПользователяСтарое)

	ИмяПользователя = НРег(СокрЛП(Строка(ИмяПользователяСтарое)));
	ИмяПользователя  = СтрЗаменить(ИмяПользователя, " ", "");
	ИмяПользователя  = СтрЗаменить(ИмяПользователя, ".", "");
	ИмяПользователя  = СтрЗаменить(ИмяПользователя, "-", "");

	Если СтрНачинаетсяС(ИмяПользователя, "user") Тогда
		Возврат ИмяПользователя;
	Иначе
		Возврат ИмяПользователя;
	КонецЕсли;

КонецФункции // ПреобразоватьИмяПользователя()

&НаКлиенте
Процедура УстановитьПользователяОС(СтрокаТаблицы, ПользовательОС, Домен)

	СтрокаТаблицы.ПользовательОС = СкомпоноватьРезультат(Домен, ПользовательОС);
	СтрокаТаблицы.ДанныеИзменены = Истина;
	СтрокаТаблицы.АутентификацияОС = Истина;
	СтрокаТаблицы.АутентификацияСтандартная = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТаблПользователейПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФорму("Справочник.Пользователи.Форма.ВыборПользователяОперационнойСистемы", , Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТаблицу(Команда)
	ЗаполнитьТаблицуПользователей();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВходВ1С(Команда)

	Для Каждого Строка Из ТаблПользователей Цикл
		Если Строка.АутентификацияОС И Не Строка.АутентификацияСтандартная Тогда
			Строка.АутентификацияСтандартная = Истина;
			Строка.ПоказыватьВСпискеВыбора = Истина;
			Строка.ДанныеИзменены = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗащитуОтОпасныхДействий(Команда)

	Для Каждого Строка Из ТаблПользователей Цикл
		Если Не Строка.ПредупреждатьОбОпасныхДействиях Тогда
			Строка.ПредупреждатьОбОпасныхДействиях = Истина;
			Строка.ДанныеИзменены = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьЗащитуОтОпасныхДействий(Команда)

	Для Каждого Строка Из ТаблПользователей Цикл
		Если Строка.ПредупреждатьОбОпасныхДействиях Тогда
			Строка.ПредупреждатьОбОпасныхДействиях = Ложь;
			Строка.ДанныеИзменены = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТаблПользователейПредупреждатьОбОпасныхДействияхПриИзменении(Элемент)
	Элементы.ТаблПользователей.ТекущиеДанные.ДанныеИзменены = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблПользователейПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент.Имя = "ТаблПользователейПользователь" Или Элемент.ТекущийЭлемент.Имя
		= "ТаблПользователейНедействителен" Тогда
		Возврат;
	КонецЕсли;
	ТекСтрока = Элементы.ТаблПользователей.ТекущиеДанные;
	Если ТекСтрока.Недействителен Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Пользователь должен быть действительным";
		Сообщение.Поле = "ТаблПользователей[" + ТекСтрока.ПолучитьИдентификатор() + "].Недействителен";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблПользователейПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент.Имя = "ТаблПользователейПользователь" Или Элемент.ТекущийЭлемент.Имя
		= "ТаблПользователейНедействителен" Тогда
		Возврат;
	КонецЕсли;
	ТекСтрока = Элементы.ТаблПользователей.ТекущиеДанные;
	Если ТекСтрока.Недействителен Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Пользователь должен быть действительным";
		Сообщение.Поле = "ТаблПользователей[" + ТекСтрока.ПолучитьИдентификатор() + "].Недействителен";
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПользователей(Команда)
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора");
КонецПроцедуры

&НаКлиенте
Процедура ТаблПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТаблПользователейПользователь" Тогда
		ПоказатьЗначение( , Элементы.ТаблПользователей.ТекущиеДанные.Пользователь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуУдаленияНаСервере(Пользователь)

	Если Пользователь.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ПользовательОбъект = Пользователь.ПолучитьОбъект();
	ПользовательОбъект.УстановитьПометкуУдаления(Не ПользовательОбъект.ПометкаУдаления);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Пользователь);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|	Пользователи.Недействителен КАК Недействителен,
	|	Пользователи.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Служебный = ЛОЖЬ
	|	И Пользователи.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(Выборка.ИдентификаторПользователяИБ);
		Если СвойстваПользователяИБ <> Неопределено Тогда
			СтрокиОтбора = ТаблПользователей.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
			Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОтбора, Выборка);
				ЗаполнитьЗначенияСвойств(СтрокаОтбора, СвойстваПользователяИБ);
				СтрокаОтбора.ПредупреждатьОбОпасныхДействиях = СвойстваПользователяИБ.ПользовательИБ.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияЗавершение(Результат, Пользователь) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	УстановитьПометкуУдаленияНаСервере(Пользователь);
	Элементы.ТаблПользователей.Обновить();

КонецПроцедуры // УстановитьПометкуУдаленияЗавершение()

&НаКлиенте
Процедура УстановитьПометкуУдаления(Команда)

	Пользователь = Команда.ИспользуемаяТаблица.ТекущиеДанные.Пользователь;
	ТекстУстановить = ?(Команда.ИспользуемаяТаблица.ТекущиеДанные.ПометкаУдаления, "Снять", "Установить");
	Оповещение = Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение", ЭтаФорма, Пользователь);
	ПоказатьВопрос(Оповещение, СтрШаблон("%1 у ""%2"" пометку на удаление?", ТекстУстановить, Пользователь),
		РежимДиалогаВопрос.ДаНет);

КонецПроцедуры