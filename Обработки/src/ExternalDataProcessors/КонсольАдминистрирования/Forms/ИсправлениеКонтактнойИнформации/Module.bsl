
&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Если Поле.Имя = "Вид" Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Вид);
	Иначе
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИсправитьЗначенияНаСервере(Строка)
	
	Если Строка.Вид.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДанных = Строка.Ссылка.ПолучитьОбъект();
	СтрокаКИ = ОбъектДанных.КонтактнаяИнформация[Строка.НомерСтроки - 1];
	Если ПустаяСтрока(СтрокаКИ.Представление) Тогда
		Если Не ПустаяСтрока(СтрокаКИ.Значение) Тогда
			СтрокаКИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(СтрокаКИ.Значение, СтрокаКИ.Вид);
		ИначеЕсли Не ПустаяСтрока(СтрокаКИ.ЗначенияПолей) Тогда
			СтрокаКИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Вид);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаКИ.Представление = СокрЛП(СтрокаКИ.Представление);
	КИ_JSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СтрокаКИ.Представление, СтрокаКИ.Вид);
	КИ_XML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(КИ_JSON, СтрокаКИ.Представление, СтрокаКИ.Вид);
	СтрокаКИ.Тип = Строка.Вид.Тип;
	СтрокаКИ.Значение = КИ_JSON;
	СтрокаКИ.ЗначенияПолей = КИ_XML;
	ОбъектДанных.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьЗначения(Команда)
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
	СписокЗначений.СортироватьПоЗначению();
	ВыделенныеСтроки = СписокЗначений.ВыгрузитьЗначения();
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	Сч = 0;
	Для каждого НомерСтроки Из ВыделенныеСтроки Цикл
		Сч = Сч + 1;
		Прогресс = Окр(Сч / КоличествоВыделенныхСтрок * 100);
		Состояние("Идет обработка данных...", Прогресс,, БиблиотекаКартинок.АктивироватьЗадачу);
		Строка = Элементы.Список.ДанныеСтроки(НомерСтроки);
		ИсправитьЗначенияНаСервере(Строка);
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура УдалитьНекорректныеДанныеНаСервере(Строка)
	
	Если Строка.Вид.Пустая() И ПустаяСтрока(Строка.Представление) Тогда
		ОбъектДанных = Строка.Ссылка.ПолучитьОбъект();
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Тип", Строка.Тип);
		СтруктураОтбора.Вставить("Вид", Строка.Вид);
		СтруктураОтбора.Вставить("Представление", Строка.Представление);
		СтруктураОтбора.Вставить("ЗначенияПолей", Строка.ЗначенияПолей);
		СтруктураОтбора.Вставить("Значение", Строка.Значение);
		НайденныеСтроки = ОбъектДанных.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			ОбъектДанных.КонтактнаяИнформация.Удалить(НайденнаяСтрока);
			ОбъектДанных.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНекорректныеДанные(Команда)
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);
	СписокЗначений.СортироватьПоЗначению();
	ВыделенныеСтроки = СписокЗначений.ВыгрузитьЗначения();
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	Сч = 0;
	Для каждого НомерСтроки Из ВыделенныеСтроки Цикл
		Сч = Сч + 1;
		Прогресс = Окр(Сч / КоличествоВыделенныхСтрок * 100);
		Состояние("Идет обработка данных...", Прогресс,, БиблиотекаКартинок.АктивироватьЗадачу);
		Строка = Элементы.Список.ДанныеСтроки(НомерСтроки);
		УдалитьНекорректныеДанныеНаСервере(Строка);
	КонецЦикла;
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПервыйСправочник = Истина;
	Для каждого СправочникМетаданных Из Метаданные.Справочники Цикл
		Если СправочникМетаданных.ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
			ИмяСправочника = СправочникМетаданных.Имя;
			Если ПервыйСправочник Тогда
				Список.ТекстЗапроса = 
				"ВЫБРАТЬ
				|	" + ИмяСправочника + "КИ.Ссылка КАК Ссылка,
				|	" + ИмяСправочника + "КИ.НомерСтроки КАК НомерСтроки,
				|	" + ИмяСправочника + "КИ.Тип КАК Тип,
				|	" + ИмяСправочника + "КИ.Вид КАК Вид,
				|	" + ИмяСправочника + "КИ.Представление КАК Представление,
				|	" + ИмяСправочника + "КИ.ЗначенияПолей КАК ЗначенияПолей,
				|	" + ИмяСправочника + "КИ.Значение КАК Значение,
				|	ТИПЗНАЧЕНИЯ(" + ИмяСправочника + "КИ.Ссылка) КАК ТипСсылки
				|ИЗ
				|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК " + ИмяСправочника + "КИ";
				ПервыйСправочник = Ложь;
			Иначе
				Список.ТекстЗапроса = Список.ТекстЗапроса + Символы.ПС + Символы.ПС +
				"ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	" + ИмяСправочника + "КИ.Ссылка КАК Ссылка,
				|	" + ИмяСправочника + "КИ.НомерСтроки КАК НомерСтроки,
				|	" + ИмяСправочника + "КИ.Тип КАК Тип,
				|	" + ИмяСправочника + "КИ.Вид КАК Вид,
				|	" + ИмяСправочника + "КИ.Представление КАК Представление,
				|	" + ИмяСправочника + "КИ.ЗначенияПолей КАК ЗначенияПолей,
				|	" + ИмяСправочника + "КИ.Значение КАК Значение,
				|	ТИПЗНАЧЕНИЯ(" + ИмяСправочника + "КИ.Ссылка) КАК ТипСсылки
				|ИЗ
				|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК " + ИмяСправочника + "КИ";			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
